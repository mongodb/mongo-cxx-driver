functions:
  abi-compliance-check:
    - command: subprocess.exec
      type: setup
      params:
        binary: bash
        args:
          - -c
          - mongo-cxx-driver/.evergreen/scripts/abi-compliance-check-setup.sh
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - -c
          - mongo-cxx-driver/.evergreen/scripts/abi-compliance-check-test.sh
    - command: s3.put
      type: system
      params:
        display_name: "ABI Compliance Check (Stable): "
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        bucket: mciuploads
        content_type: text/html
        local_files_include_filter: cxx-abi/compat_reports/**/compat_report.html
        permissions: public-read
        remote_file: mongo-cxx-driver/${branch_name}/${revision}/${version_id}/${build_id}/${task_id}/${execution}/abi-compliance-check/abi/
    - command: s3.put
      type: system
      params:
        display_name: "ABI Compliance Check (Stable): "
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        bucket: mciuploads
        content_type: text/plain
        local_files_include_filter: cxx-abi/logs/**/log.txt
        permissions: public-read
        remote_file: mongo-cxx-driver/${branch_name}/${revision}/${version_id}/${build_id}/${task_id}/${execution}/abi-compliance-check/abi/
    - command: s3.put
      type: system
      params:
        display_name: "ABI Compliance Check (Unstable): "
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        bucket: mciuploads
        content_type: text/html
        local_files_include_filter: cxx-noabi/compat_reports/**/compat_report.html
        permissions: public-read
        remote_file: mongo-cxx-driver/${branch_name}/${revision}/${version_id}/${build_id}/${task_id}/${execution}/abi-compliance-check/noabi/
    - command: s3.put
      type: system
      params:
        display_name: "ABI Compliance Check (Unstable): "
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        bucket: mciuploads
        content_type: text/plain
        local_files_include_filter: cxx-noabi/logs/**/log.txt
        permissions: public-read
        remote_file: mongo-cxx-driver/${branch_name}/${revision}/${version_id}/${build_id}/${task_id}/${execution}/abi-compliance-check/noabi/
  abi-prohibited-symbols:
    command: subprocess.exec
    type: test
    params:
      binary: bash
      args:
        - -c
        - mongo-cxx-driver/.evergreen/scripts/abi-prohibited-symbols-test.sh
  abidiff:
    - command: subprocess.exec
      type: setup
      params:
        binary: bash
        args:
          - -c
          - mongo-cxx-driver/.evergreen/scripts/abidiff-setup.sh
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - -c
          - mongo-cxx-driver/.evergreen/scripts/abidiff-test.sh
    - command: s3.put
      type: system
      params:
        display_name: "abidiff (Stable): "
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        bucket: mciuploads
        content_type: text/plain
        local_files_include_filter: cxx-abi/*.txt
        permissions: public-read
        remote_file: mongo-cxx-driver/${branch_name}/${revision}/${version_id}/${build_id}/${task_id}/${execution}/abidiff/abi/
    - command: s3.put
      type: system
      params:
        display_name: "abidiff (Unstable): "
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        bucket: mciuploads
        content_type: text/plain
        local_files_include_filter: cxx-noabi/*.txt
        permissions: public-read
        remote_file: mongo-cxx-driver/${branch_name}/${revision}/${version_id}/${build_id}/${task_id}/${execution}/abidiff/noabi/
  backtrace:
    command: subprocess.exec
    type: system
    params:
      binary: bash
      working_dir: mongo-cxx-driver
      args:
        - -c
        - etc/debug-core-evergreen.sh
  benchmarks-compile:
    command: subprocess.exec
    type: setup
    params:
      binary: bash
      working_dir: mongo-cxx-driver
      args:
        - -c
        - |
          set -o errexit
          set -o pipefail
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH="$(pwd)/../mongoc" -DCMAKE_CXX_STANDARD=20
          cmake --build build --target microbenchmarks --parallel 64
  benchmarks-run:
    - command: subprocess.exec
      type: setup
      params:
        binary: bash
        working_dir: mongo-cxx-driver
        args:
          - -c
          - etc/microbenchmark-test-data.sh
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        working_dir: mongo-cxx-driver
        args:
          - -c
          - build/benchmark/microbenchmarks all
    - command: perf.send
      type: system
      params:
        name: perf
        file: mongo-cxx-driver/results.json
  build-package-debian:
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        working_dir: mongo-cxx-driver
        args:
          - -c
          - |
            set -o errexit
            export IS_PATCH="${is_patch}"
            .evergreen/scripts/debian_package_build.sh
    - command: s3.put
      params:
        display_name: "\"deb.tar.gz\""
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        bucket: mciuploads
        content_type: ${content_type|application/x-gzip}
        local_file: deb.tar.gz
        permissions: public-read
        remote_file: mongo-cxx-driver/${branch_name}/${revision}/${version_id}/${build_id}/${execution}/debian-packages.tar.gz
  build-package-rpm:
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        working_dir: mongo-cxx-driver
        args:
          - -c
          - .evergreen/scripts/build_snapshot_rpm.sh
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        bucket: mciuploads
        content_type: ${content_type|application/x-gzip}
        local_file: rpm.tar.gz
        permissions: public-read
        remote_file: mongo-cxx-driver/${branch_name}/${revision}/${version_id}/${build_id}/${execution}/rpm-packages.tar.gz
  build_mongohouse:
    command: subprocess.exec
    type: setup
    params:
      binary: bash
      args:
        - -c
        - |
          if [ ! -d "drivers-evergreen-tools" ]; then
              git clone https://github.com/mongodb-labs/drivers-evergreen-tools.git
          fi
          cd drivers-evergreen-tools
          export DRIVERS_TOOLS=$(pwd)

          .evergreen/atlas_data_lake/pull-mongohouse-image.sh
  check augmented sbom:
    command: subprocess.exec
    type: test
    params:
      binary: bash
      working_dir: mongo-cxx-driver
      include_expansions_in_env:
        - ARTIFACTORY_USER
        - ARTIFACTORY_PASSWORD
        - SILK_CLIENT_ID
        - SILK_CLIENT_SECRET
      args:
        - -c
        - .evergreen/scripts/check-augmented-sbom.sh
  clang-tidy:
    command: subprocess.exec
    type: test
    params:
      binary: bash
      working_dir: mongo-cxx-driver
      include_expansions_in_env:
        - cc_compiler
        - cxx_compiler
        - distro_id
      args:
        - -c
        - etc/run-clang-tidy.sh
  compile:
    command: subprocess.exec
    type: test
    params:
      binary: bash
      working_dir: mongo-cxx-driver
      env:
        CC: ${cc_compiler}
        CXX: ${cxx_compiler}
      include_expansions_in_env:
        - branch_name
        - BSON_EXTRA_ALIGNMENT
        - BSONCXX_POLYFILL
        - build_type
        - COMPILE_MACRO_GUARD_TESTS
        - distro_id
        - ENABLE_CODE_COVERAGE
        - ENABLE_TESTS
        - generator
        - platform
        - REQUIRED_CXX_STANDARD
        - RUN_DISTCHECK
        - USE_SANITIZER_ASAN
        - USE_SANITIZER_UBSAN
        - USE_STATIC_LIBS
        - UV_INSTALL_DIR
      args:
        - -c
        - .evergreen/scripts/compile.sh
  docker-image-build:
    command: subprocess.exec
    type: test
    params:
      binary: bash
      working_dir: mongo-cxx-driver
      args:
        - -c
        - |
          set -o errexit
          set -o pipefail
          docker login -u "${ARTIFACTORY_USER}" --password-stdin artifactory.corp.mongodb.com <<<"${ARTIFACTORY_PASSWORD}"
          set -x
          echo "Building Alpine Docker image"
          make -C extras/docker/alpine3.19 nocachebuild test
          echo "Building Debian Docker image"
          make -C extras/docker/bookworm nocachebuild test
          echo "Building Red Hat UBI Docker image"
          make -C extras/docker/redhat-ubi-9.4 nocachebuild test
          echo "Building Ubuntu Docker image"
          make -C extras/docker/noble nocachebuild test
  fetch-det:
    - command: subprocess.exec
      type: setup
      params:
        binary: bash
        args:
          - -c
          - |
            if [[ ! -d drivers-evergreen-tools ]]; then
                git clone --depth=1 https://github.com/mongodb-labs/drivers-evergreen-tools.git
            fi
            echo "DRIVERS_TOOLS: $(pwd)/drivers-evergreen-tools" > det-expansion.yml
    - command: expansions.update
      type: setup
      params:
        file: det-expansion.yml
  fetch_c_driver_source:
    command: subprocess.exec
    type: setup
    params:
      binary: bash
      args:
        - -c
        - git clone --depth 1 https://github.com/mongodb/mongo-c-driver mongoc
  install-uv:
    - command: subprocess.exec
      type: setup
      params:
        binary: bash
        args:
          - -c
          - |
            if [[ -n "$XDG_CACHE_DIR" ]]; then
                cache_dir="$XDG_CACHE_DIR" # XDG Base Directory specification.
            elif [[ -n "$LOCALAPPDATA" ]]; then
                cache_dir="$LOCALAPPDATA" # Windows.
            elif [[ -n "$USERPROFILE" ]]; then
                cache_dir="$USERPROFILE/.cache" # Windows (fallback).
            elif [[ -d "$HOME/Library/Caches" ]]; then
                cache_dir="$HOME/Library/Caches" # MacOS.
            elif [[ -n "$HOME" ]]; then
                cache_dir="$HOME/.cache" # Linux-like.
            elif [[ -d ~/.cache ]]; then
                cache_dir="~/.cache" # Linux-like (fallback).
            else
                cache_dir="$(pwd)/.cache" # EVG task directory (fallback).
            fi

            mkdir -p "$cache_dir/mongo-cxx-driver" || exit
            cache_dir="$(cd "$cache_dir/mongo-cxx-driver" && pwd)" || exit

            printf "MONGO_CXX_DRIVER_CACHE_DIR: %s\n" "$cache_dir" >|expansions.set-cache-dir.yml
    - command: expansions.update
      type: setup
      params:
        file: expansions.set-cache-dir.yml
    - command: subprocess.exec
      type: setup
      params:
        binary: bash
        args:
          - -c
          - |
            set -o errexit
            set -o pipefail

            if [[ ! -n "${MONGO_CXX_DRIVER_CACHE_DIR}" ]]; then
                echo "MONGO_CXX_DRIVER_CACHE_DIR is not defined!" 1>&2
                exit 1
            fi

            uv_install_dir="${MONGO_CXX_DRIVER_CACHE_DIR}/uv-0.5.14"
            mkdir -p "$uv_install_dir"

            if ! command -v "$uv_install_dir/uv" 2>/dev/null; then
                env \
                    UV_INSTALL_DIR="$uv_install_dir" \
                    UV_UNMANAGED_INSTALL=1 \
                    INSTALLER_PRINT_VERBOSE=1 \
                    mongo-cxx-driver/.evergreen/scripts/uv-installer.sh
            fi

            PATH="$uv_install_dir:$PATH" command -V uv
            PATH="$uv_install_dir:$PATH" uv --version

            printf "UV_INSTALL_DIR: %s\n" "$uv_install_dir" >|expansions.uv.yml
    - command: expansions.update
      type: setup
      params:
        file: expansions.uv.yml
  install_c_driver:
    - command: expansions.update
      type: setup
      params:
        updates:
          - { key: mongoc_version_minimum, value: f2c1bb7989177fa2ddba1a915e8423e46ee1defe }
    - command: subprocess.exec
      type: setup
      params:
        binary: bash
        add_expansions_to_env: true
        args:
          - -c
          - mongo-cxx-driver/.evergreen/scripts/install-c-driver.sh
  lint:
    command: subprocess.exec
    type: test
    params:
      binary: bash
      working_dir: mongo-cxx-driver
      env:
        DRYRUN: "1"
      args:
        - -c
        - ${UV_INSTALL_DIR}/uv run --frozen etc/clang-format-all.sh
  run scan build:
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        working_dir: mongo-cxx-driver
        add_expansions_to_env: true
        redirect_standard_error_to_output: true
        args:
          - -c
          - .evergreen/scripts/compile-scan-build.sh
  run_kms_servers:
    - command: subprocess.exec
      type: setup
      params:
        binary: bash
        args:
          - -c
          - |
            set -o errexit
            echo "Preparing CSFLE venv environment..."
            cd ./drivers-evergreen-tools/.evergreen/csfle
            # This function ensures future invocations of activate-kmstlsvenv.sh conducted in
            # parallel do not race to setup a venv environment; it has already been prepared.
            # This primarily addresses the situation where the "test" and "run_kms_servers"
            # functions invoke 'activate-kmstlsvenv.sh' simultaneously.
            . ./activate-kmstlsvenv.sh && deactivate
            echo "Preparing CSFLE venv environment... done."
    - command: subprocess.exec
      type: setup
      params:
        binary: bash
        background: true
        args:
          - -c
          - |
            set -o errexit
            echo "Starting mock KMS servers..."
            cd ./drivers-evergreen-tools/.evergreen/csfle
            . ./activate-kmstlsvenv.sh
            python -u kms_http_server.py --ca_file ../x509gen/ca.pem --cert_file ../x509gen/server.pem --port 8999 &
            python -u kms_http_server.py --ca_file ../x509gen/ca.pem --cert_file ../x509gen/expired.pem --port 9000 &
            python -u kms_http_server.py --ca_file ../x509gen/ca.pem --cert_file ../x509gen/wrong-host.pem --port 9001 &
            python -u kms_http_server.py --ca_file ../x509gen/ca.pem --cert_file ../x509gen/server.pem --port 9002 --require_client_cert &
            python -u kms_kmip_server.py &
            echo "Starting mock KMS servers... done."
  run_mongohouse:
    command: subprocess.exec
    type: setup
    params:
      binary: bash
      args:
        - -c
        - |
          cd drivers-evergreen-tools
          export DRIVERS_TOOLS=$(pwd)

          .evergreen/atlas_data_lake/run-mongohouse-image.sh
  set-cache-dir:
    - command: subprocess.exec
      type: setup
      params:
        binary: bash
        args:
          - -c
          - |
            if [[ -n "$XDG_CACHE_DIR" ]]; then
                cache_dir="$XDG_CACHE_DIR" # XDG Base Directory specification.
            elif [[ -n "$LOCALAPPDATA" ]]; then
                cache_dir="$LOCALAPPDATA" # Windows.
            elif [[ -n "$USERPROFILE" ]]; then
                cache_dir="$USERPROFILE/.cache" # Windows (fallback).
            elif [[ -d "$HOME/Library/Caches" ]]; then
                cache_dir="$HOME/Library/Caches" # MacOS.
            elif [[ -n "$HOME" ]]; then
                cache_dir="$HOME/.cache" # Linux-like.
            elif [[ -d ~/.cache ]]; then
                cache_dir="~/.cache" # Linux-like (fallback).
            else
                cache_dir="$(pwd)/.cache" # EVG task directory (fallback).
            fi

            mkdir -p "$cache_dir/mongo-cxx-driver" || exit
            cache_dir="$(cd "$cache_dir/mongo-cxx-driver" && pwd)" || exit

            printf "MONGO_CXX_DRIVER_CACHE_DIR: %s\n" "$cache_dir" >|expansions.set-cache-dir.yml
    - command: expansions.update
      type: setup
      params:
        file: expansions.set-cache-dir.yml
  setup:
    - command: subprocess.exec
      type: setup
      params:
        binary: bash
        args:
          - -c
          - |
            set -o errexit
            set -o pipefail
            rm -rf "mongo-cxx-driver"
            rm -fr "mongo-c-driver"
            rm -fr mongod
            rm -fr drivers-evergreen-tools
    - command: git.get_project
      params:
        directory: mongo-cxx-driver
    - command: subprocess.exec
      type: setup
      params:
        binary: bash
        args:
          - -c
          - |
            set -o errexit
            set -o pipefail
            cc --version || true
            c++ --version || true
            gcc --version || true
            g++ --version || true
            clang --version || true
            cmake --version || true
            openssl version || true
  start_mongod:
    - command: subprocess.exec
      type: setup
      params:
        binary: bash
        include_expansions_in_env:
          - build_variant
          - mongodb_version
          - AUTH
          - ORCHESTRATION_FILE
          - REQUIRE_API_VERSION
          - TOPOLOGY
        args:
          - -c
          - mongo-cxx-driver/.evergreen/scripts/start-mongod.sh
    - command: expansions.update
      type: setup
      params:
        file: drivers-evergreen-tools/mo-expansion.yml
  stop_mongod:
    command: subprocess.exec
    type: system
    params:
      binary: bash
      args:
        - -c
        - |
          set -o errexit
          set -o pipefail
          if cd drivers-evergreen-tools/.evergreen/orchestration 2>/dev/null; then
              . ../venv-utils.sh
              if venvactivate venv; then
              mongo-orchestration stop
              fi
          fi
  test:
    command: subprocess.exec
    type: test
    params:
      binary: bash
      working_dir: mongo-cxx-driver
      include_expansions_in_env:
        - build_type
        - CRYPT_SHARED_LIB_PATH
        - cse_aws_access_key_id
        - cse_aws_secret_access_key
        - cse_azure_client_id
        - cse_azure_client_secret
        - cse_azure_tenant_id
        - cse_gcp_email
        - cse_gcp_privatekey
        - disable_slow_tests
        - distro_id
        - example_projects_cc
        - example_projects_cxx
        - example_projects_cxx_standard
        - example_projects_cxxflags
        - example_projects_ldflags
        - generator
        - lib_dir
        - MONGOCXX_TEST_TOPOLOGY
        - MONGODB_API_VERSION
        - platform
        - TEST_WITH_ASAN
        - TEST_WITH_UBSAN
        - TEST_WITH_VALGRIND
        - use_mongocryptd
        - USE_STATIC_LIBS
      args:
        - -c
        - .evergreen/scripts/test.sh
  test atlas connectivity:
    command: subprocess.exec
    type: test
    params:
      binary: bash
      working_dir: mongo-cxx-driver
      silent: true
      args:
        - -c
        - |
          export MONGOC_INSTALL_PREFIX=$(pwd)/../mongoc
          export MONGOCXX_INSTALL_PREFIX=$(pwd)/build/install
          export LIB_DIR=${lib_dir}
          export BUILD_TYPE=${build_type}
          export BUILD_DIR=$(pwd)/build

          # The atlas_serverless_uri expansion is set in the Evergreen project settings.
          export URI="${atlas_serverless_uri}"

          ./.evergreen/scripts/connect.sh
  test auth:
    command: subprocess.exec
    type: test
    params:
      binary: bash
      working_dir: mongo-cxx-driver
      args:
        - -c
        - |
          export MONGOC_INSTALL_PREFIX=$(pwd)/../mongoc
          export MONGOCXX_INSTALL_PREFIX=$(pwd)/build/install
          export LIB_DIR=${lib_dir}
          export BUILD_TYPE=${build_type}
          export BUILD_DIR=$(pwd)/build
          export URI="mongodb://bob:pwd123@localhost"
          ./.evergreen/scripts/connect.sh
  test-search-index-helpers:
    command: subprocess.exec
    type: test
    params:
      binary: bash
      working_dir: mongo-cxx-driver
      args:
        - -c
        - |
          export MONGODB_URI=${MONGODB_URI}
          export LD_LIBRARY_PATH=$(pwd)/../mongoc/lib

          ./build/src/mongocxx/test/test_driver "atlas search indexes prose tests"
  test_mongohouse:
    command: subprocess.exec
    type: test
    params:
      binary: bash
      working_dir: mongo-cxx-driver
      args:
        - -c
        - .evergreen/scripts/test-mongohouse.sh
  uninstall-check:
    command: subprocess.exec
    type: test
    params:
      binary: bash
      working_dir: mongo-cxx-driver
      args:
        - -c
        - |
          case "$OSTYPE" in
          darwin*|linux*) .evergreen/scripts/uninstall_check.sh ;;
          cygwin) cmd.exe /c ".evergreen\\scripts\\uninstall_check_windows.cmd" ;;
          esac
  upload augmented sbom:
    - command: s3.put
      type: system
      params:
        display_name: Augmented SBOM
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        bucket: mciuploads
        content_type: application/json
        local_file: mongo-cxx-driver/etc/augmented.sbom.json.new
        permissions: public-read
        remote_file: mongo-cxx-driver/${build_variant}/${revision}/${version_id}/${build_id}/silk/augmented.sbom.json
    - command: s3.put
      type: system
      params:
        display_name: Augmented SBOM (Diff)
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        bucket: mciuploads
        content_type: application/json
        local_file: mongo-cxx-driver/diff.txt
        permissions: public-read
        remote_file: mongo-cxx-driver/${build_variant}/${revision}/${version_id}/${build_id}/silk/augmented.sbom.json.diff
  upload code coverage:
    command: subprocess.exec
    type: system
    params:
      binary: bash
      working_dir: mongo-cxx-driver
      include_expansions_in_env:
        - codecov_token
      args:
        - -c
        - .evergreen/scripts/upload-code-coverage.sh
  upload mongo orchestration artifacts:
    - command: subprocess.exec
      type: system
      params:
        binary: bash
        args:
          - -c
          - |
            set -o errexit
            for log in $(find . -name '*.log'); do
              tar rf mongodb-logs.tar "$log"
            done
            if [[ -f mongodb-logs.tar ]]; then
              gzip mongodb-logs.tar
            fi
    - command: s3.put
      type: system
      params:
        display_name: mongodb-logs.tar.gz
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        bucket: mciuploads
        content_type: ${content_type|application/x-gzip}
        local_file: mongodb-logs.tar.gz
        optional: true
        permissions: public-read
        remote_file: mongo-cxx-driver/${build_variant}/${revision}/${version_id}/${build_id}/logs/${task_id}-${execution}-mongodb-logs.tar.gz
  upload scan artifacts:
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        working_dir: mongo-cxx-driver
        args:
          - -c
          - |
            set -o errexit
            if find scan -name \*.html | grep -q html; then
                (cd scan && find . -name index.html -exec echo "<li><a href='{}'>{}</a></li>" \;) >> scan.html
            else
                echo "No issues found" > scan.html
            fi
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        working_dir: mongo-cxx-driver
        env:
          AWS_ACCESS_KEY_ID: ${aws_key}
          AWS_SECRET_ACCESS_KEY: ${aws_secret}
        silent: true
        args:
          - -c
          - aws s3 cp scan s3://mciuploads/mongo-cxx-driver/${build_variant}/${revision}/${version_id}/${build_id}/scan/ --recursive --acl public-read --region us-east-1
    - command: s3.put
      type: system
      params:
        display_name: Scan Build Report
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        bucket: mciuploads
        content_type: text/html
        local_file: mongo-cxx-driver/scan.html
        permissions: public-read
        remote_file: mongo-cxx-driver/${build_variant}/${revision}/${version_id}/${build_id}/scan/index.html
  upload working dir:
    - command: archive.targz_pack
      type: system
      params:
        include:
          - ./**
        source_dir: mongo-cxx-driver
        target: working-dir.tar.gz
    - command: s3.put
      type: system
      params:
        display_name: working-dir.tar.gz
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        bucket: mciuploads
        content_type: ${content_type|application/x-gzip}
        local_file: working-dir.tar.gz
        permissions: public-read
        remote_file: mongo-cxx-driver/${build_variant}/${revision}/${version_id}/${build_id}/artifacts/${task_id}-${execution}-working-dir.tar.gz
