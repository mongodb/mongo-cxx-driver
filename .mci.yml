#######################################
#      CXX Driver Config for MCI      #
#######################################

#######################################
#            Variables                #
#######################################
variables:

    mongodb_version:
        version_latest: &version_latest latest
        version_44: &version_44 4.4
        version_42: &version_42 4.2
        version_40: &version_40 4.0

    ## cmake path variables
    extra_path:
        linux_extra_path: &linux_extra_path /opt/cmake/bin
        macos_extra_path: &macos_extra_path /Applications/Cmake.app/Contents/bin
        msvc2015_extra_path: &msvc2015_extra_path "/cygdrive/c/cmake/bin:/cygdrive/c/Program Files (x86)/MSBuild/14.0/Bin"
        msvc2017_extra_path: &msvc2017_extra_path "/cygdrive/c/cmake/bin:/cygdrive/c/Program Files (x86)/Microsoft Visual Studio/2017/Professional/MSBuild/15.0/Bin"

    ## tar options variables
    tar_options:
        linux_tar_options: &linux_tar_options --wildcards --no-anchored

    ## cmake flag variables
    cmake_flags:
        linux_cmake_flags: &linux_cmake_flags -DCMAKE_C_FLAGS="-Wall -Wextra -Wno-attributes -Werror -Wno-missing-field-initializers $ignore_deprecated" -DCMAKE_CXX_FLAGS="-Wall -Wextra -Wconversion -Wnarrowing -Wno-expansion-to-defined -pedantic -Werror -Wno-missing-field-initializers $ignore_deprecated"
        macos_cmake_flags: &macos_cmake_flags -DCMAKE_C_FLAGS="-Wall -Wextra -Wno-attributes -Werror -Wno-missing-field-initializers $ignore_deprecated" -DCMAKE_CXX_FLAGS="-stdlib=libc++ -Wall -Wextra -Wconversion -Wnarrowing -pedantic -Werror $ignore_deprecated"
        asan_cmake_flags: &asan_cmake_flags -DCMAKE_C_FLAGS="-Wall -Wextra -Wno-attributes -Werror -Wno-missing-field-initializers $ignore_deprecated" -DCMAKE_CXX_COMPILER="/usr/bin/clang++" -DCMAKE_CXX_FLAGS="-D_GLIBCXX_USE_CXX11_ABI=0 -fsanitize=address -O1 -g -fno-omit-frame-pointer -Wall -Wextra -Wconversion -Wnarrowing -pedantic -Werror $ignore_deprecated"
        ubsan_cmake_flags: &ubsan_cmake_flags -DCMAKE_C_FLAGS="-Wall -Wextra -Wno-attributes -Werror -Wno-missing-field-initializers $ignore_deprecated" -DCMAKE_CXX_COMPILER="/usr/bin/clang++" -DCMAKE_CXX_FLAGS="-D_GLIBCXX_USE_CXX11_ABI=0 -fsanitize=undefined -fsanitize-blacklist=$(pwd)/etc/ubsan.blacklist -fno-sanitize-recover=undefined -O1 -g -fno-omit-frame-pointer -Wall -Wextra -Wconversion -Wnarrowing -pedantic -Werror $ignore_deprecated"
        msvc2015_cmake_flags: &msvc2015_cmake_flags -DBOOST_ROOT=c:/local/boost_1_60_0
        msvc2015_generator: &msvc2015_generator Visual Studio 14 2015 Win64
        # The VS option /Zc:__cplusplus is necessary to build with VS2017's
        # native C++17 support. __cplusplus should indicate the standard of C++
        # the compiler supports. VS2017 erroneously reports it as 199711L
        # (instead of 201703L) without this option.
        # The VS option /EHsc is necessary to opt into C++ standard exception unwinding.
        # Without this option, some destructors may not be called in tests (CXX-2054).
        msvc2017_cmake_flags: &msvc2017_cmake_flags -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_FLAGS="/Zc:__cplusplus /EHsc"
        msvc2017_generator: &msvc2017_generator Visual Studio 15 2017 Win64

    example_projects_cc:
        asan_cc_path: &asan_cc_path /usr/bin/clang
        ubsan_cc_path: &ubsan_cc_path /usr/bin/clang

    example_projects_cxx:
        asan_cxx_path: &asan_cxx_path /usr/bin/clang++
        ubsan_cxx_path: &ubsan_cxx_path /usr/bin/clang++

    example_projects_cxxflags:
        asan_cxxflags: &asan_cxxflags -D_GLIBCXX_USE_CXX11_ABI=0 -fsanitize=address -fno-omit-frame-pointer
        ubsan_cxxflags: &ubsan_cxxflags -D_GLIBCXX_USE_CXX11_ABI=0 -fsanitize=undefined -fno-sanitize-recover=undefined -fno-omit-frame-pointer

    example_projects_ldflags:
        asan_ldflags: &asan_ldflags -fsanitize=address
        ubsan_ldflags: &ubsan_ldflags -fsanitize=undefined -fno-sanitize-recover=undefined

    example_projects_cxx_standard:
        std_experimental_cxx_standard: &std_experimental_cxx_standard 14

    poly_flags:
        poly_boost_flags: &poly_boost_flags -DBSONCXX_POLY_USE_BOOST=ON
        poly_std_experimental_flags: &poly_std_experimental_flags -DBSONCXX_POLY_USE_STD_EXPERIMENTAL=ON -DCMAKE_CXX_STANDARD=14
        poly_mnmlstc: &poly_mnmlstc -DBSONCXX_POLY_USE_MNMLSTC=ON

    ## test parameters
    test_params:
        asan_test_params: &asan_test_params PATH="/usr/lib/llvm-3.8/bin" ASAN_OPTIONS="detect_leaks=1"
        ubsan_test_params: &ubsan_test_params PATH="/usr/lib/llvm-3.8/bin" UBSAN_OPTIONS="print_stacktrace=1"
        valgrind_test_params: &valgrind_test_params valgrind --leak-check=full --track-origins=yes --num-callers=50 --error-exitcode=1 --error-limit=no --read-var-info=yes --suppressions=../etc/memcheck.suppressions


#######################################
#            Functions                #
#######################################

functions:
    "setup":
        - command: shell.exec
          params:
              shell: bash
              script: |
                 set -o errexit
                 set -o pipefail
                 rm -rf "mongo-cxx-driver"
                 rm -fr "mongo-c-driver"
                 rm -fr mongod
                 rm -fr drivers-evergreen-tools
        - command: git.get_project
          params:
              directory: "mongo-cxx-driver"
        - command: shell.exec
          params:
              shell: bash
              working_dir: "."
              script: |
                 set -o errexit
                 set -o pipefail
                 cc --version || true
                 c++ --version || true
                 gcc --version || true
                 g++ --version || true
                 clang --version || true
                 cmake --version || true

    "start_mongod":
        command: shell.exec
        params:
            shell: bash
            working_dir: "."
            script: |
                set -o errexit
                set -o pipefail
                if [ ! -d "drivers-evergreen-tools" ]; then
                    git clone git@github.com:mongodb-labs/drivers-evergreen-tools.git
                fi
                cd drivers-evergreen-tools
                export DRIVERS_TOOLS=$(pwd)
                if [ "Windows_NT" == "$OS" ]; then
                    export DRIVERS_TOOLS=$(cygpath -m $DRIVERS_TOOLS)
                fi
                export MONGODB_BINARIES=$DRIVERS_TOOLS/mongodb/bin
                export MONGO_ORCHESTRATION_HOME=$DRIVERS_TOOLS/.evergreen/orchestration
                export MONGODB_VERSION=${mongodb_version}
                export AUTH=${AUTH}
                export TOPOLOGY=${TOPOLOGY|server}

                echo "{ \"releases\": { \"default\": \"$MONGODB_BINARIES\" }}" > $MONGO_ORCHESTRATION_HOME/orchestration.config
                ./.evergreen/run-orchestration.sh

                # Copy mongocryptd up so other functions can find it later, since we can't share PATHs
                if [ -f $MONGODB_BINARIES/mongocryptd ]; then
                    cp $MONGODB_BINARIES/mongocryptd ../mongocryptd
                fi

                cd ../
                pwd


    "stop_mongod":
        command: shell.exec
        params:
            shell: bash
            working_dir: "."
            script: |
                set -o errexit
                set -o pipefail
                cd drivers-evergreen-tools/.evergreen/orchestration
                if [ -f venv/bin/activate ]; then
                    . venv/bin/activate
                elif [ -f venv/Scripts/activate ]; then
                    . venv/Scripts/activate
                fi
                mongo-orchestration stop

    "install_c_driver":
        command: shell.exec
        params:
            shell: bash
            working_dir: "mongo-cxx-driver"
            script: |
                    set -o errexit
                    set -o pipefail
                    export PREFIX=$(pwd)/../mongoc/
                    if [ "Windows_NT" == "$OS" ]; then
                        PREFIX=$(cygpath -m "$PREFIX")
                    fi
                    export GENERATOR="${generator}"
                    ./.evergreen/install_c_driver.sh ${mongoc_version|master}

    "lint":
        - command: shell.exec
          params:
              shell: bash
              working_dir: "mongo-cxx-driver"
              script: |
                  set -o errexit
                  set -o pipefail
                  python etc/clang_format.py lint

    "compile":
        - command: shell.exec
          params:
              shell: bash
              working_dir: "mongo-cxx-driver"
              script: |
                  set -o errexit
                  set -o pipefail
                  export BUILD_TYPE=${build_type}
                  export PATH="${extra_path}:$PATH"
                  export RUN_DISTCHECK=${RUN_DISTCHECK}

                  ADDL_OPTS=
                  if [ "${USE_STATIC_LIBS}" ]; then
                      ADDL_OPTS="-DBUILD_SHARED_LIBS=OFF"
                  fi

                  MONGOC_PREFIX="$(pwd)/../mongoc"
                  echo "MONGOC_PREFIX=$MONGOC_PREFIX"
                  ls -l $MONGOC_PREFIX

                  if [ "Windows_NT" == "$OS" ]; then
                      MONGOC_PREFIX=$(cygpath -m "$MONGOC_PREFIX")
                  fi

                  python -m virtualenv venv
                  cd venv
                  if [ -f bin/activate ]; then
                      . bin/activate
                      ./bin/pip install GitPython
                  elif [ -f Scripts/activate ]; then
                      . Scripts/activate
                      ./Scripts/pip install GitPython
                  fi
                  cd ..

                  export GENERATOR="${generator}"

                  if [ "$(echo ${branch_name} | cut -f2 -d'/')" != "${branch_name}" ]; then
                      # ignore deprecation warnings when building on a release branch
                      ignore_deprecated=-Wno-deprecated-declarations
                  fi

                  .evergreen/compile.sh -DCMAKE_PREFIX_PATH="$MONGOC_PREFIX" ${cmake_flags} ${poly_flags} $ADDL_OPTS -DCMAKE_INSTALL_PREFIX=install

    "test":
        - command: shell.exec
          params:
              shell: bash
              working_dir: "mongo-cxx-driver"
              script: |
                  set -o errexit
                  set -o pipefail

                  # Grabs the mongocryptd path
                  cd ../
                  export MONGOCRYPTD_PATH=$(pwd)/
                  if [ "Windows_NT" == "$OS" ]; then
                     export MONGOCRYPTD_PATH=$(cygpath -m $MONGOCRYPTD_PATH)
                  fi
                  cd mongo-cxx-driver

                  export PATH="${extra_path}:$PATH"

                  cd build
                  export PREFIX=$(pwd)/../../mongoc

                  # Use PATH / LD_LIBRARY_PATH / DYLD_LIBRARY_PATH to inform the tests where to find
                  # mongoc library dependencies on Windows / Linux / Mac OS, respectively.
                  # Additionally, on Windows, we also need to inform the tests where to find
                  # mongocxx library dependencies.
                  export LD_LIBRARY_PATH=.:$PREFIX/lib/
                  export DYLD_LIBRARY_PATH=.:$PREFIX/lib/
                  export PATH=$(pwd)/src/bsoncxx/${build_type}:$(pwd)/src/mongocxx/${build_type}:$PREFIX/bin:$(pwd)/install/bin:$PATH

                  # CRUD_TESTS_PATH and GRIDFS_TESTS_PATH are required to be set by the
                  # `test_crud_specs` and `test_gridfs_specs` test binaries, respectively.
                  export CRUD_TESTS_PATH="$(pwd)/../data/crud"
                  export CHANGE_STREAM_TESTS_PATH="$(pwd)/../data/change_stream"
                  export ENCRYPTION_TESTS_PATH="$(pwd)/../data/client_side_encryption"
                  export GRIDFS_TESTS_PATH="$(pwd)/../data/gridfs"
                  export COMMAND_MONITORING_TESTS_PATH="$(pwd)/../data/command-monitoring"
                  export TRANSACTIONS_TESTS_PATH="$(pwd)/../data/transactions"
                  export WITH_TRANSACTION_TESTS_PATH="$(pwd)/../data/with_transaction"
                  export RETRYABLE_READS_TESTS_PATH="$(pwd)/../data/retryable-reads"
                  export READ_WRITE_CONCERN_OPERATION_TESTS_PATH="$(pwd)/../data/read-write-concern/operation"

                  # export environment variables for encryption tests
                  set +o errexit
                  export MONGOCXX_TEST_AWS_SECRET_ACCESS_KEY="${cse_aws_secret_access_key}"
                  export MONGOCXX_TEST_AWS_ACCESS_KEY_ID="${cse_aws_access_key_id}"
                  set -o errexit

                  if [ "Windows_NT" == "$OS" ]; then
                      CRUD_TESTS_PATH=$(cygpath -m $CRUD_TESTS_PATH)
                      ENCRYPTION_TESTS_PATH=$(cygpath -m $ENCRYPTION_TESTS_PATH)

                      CTEST_OUTPUT_ON_FAILURE=1 MSBuild.exe /p:Configuration=${build_type} RUN_TESTS.vcxproj
                      CTEST_OUTPUT_ON_FAILURE=1 MSBuild.exe /p:Configuration=${build_type} examples/run-examples.vcxproj
                  else
                      # ENABLE_SLOW_TESTS is required to run the slow tests that are disabled by default. The slow tests should not be run if explicitly disabled.
                      if [ -z "${disable_slow_tests}" ]; then
                          export MONGOCXX_ENABLE_SLOW_TESTS=1
                      fi

                      ulimit -c unlimited || true

                      # Run tests and examples 1-by-1 with "test_params" so we can run them with valgrind.
                      ${test_params} ./src/bsoncxx/test/test_bson
                      ${test_params} ./src/mongocxx/test/test_driver
                      ${test_params} ./src/mongocxx/test/test_change_stream_specs
                      ${test_params} ./src/mongocxx/test/test_client_side_encryption_specs
                      ${test_params} ./src/mongocxx/test/test_crud_specs
                      ${test_params} ./src/mongocxx/test/test_gridfs_specs
                      ${test_params} ./src/mongocxx/test/test_command_monitoring_specs
                      ${test_params} ./src/mongocxx/test/test_instance
                      ${test_params} ./src/mongocxx/test/test_transactions_specs
                      ${test_params} ./src/mongocxx/test/test_logging
                      ${test_params} ./src/mongocxx/test/test_retryable_reads_specs
                      ${test_params} ./src/mongocxx/test/test_read_write_concern_specs


                      # Some platforms like OS X don't support the /mode syntax to the -perm option
                      # of find(1), and some platforms like Ubuntu 16.04 don't support the +mode
                      # syntax, so we use Perl to help us find executable files.
                      EXAMPLES=$(find examples -type f | sort | perl -nlwe 'print if -x')
                      for test in $EXAMPLES; do
                        case "$test" in
                          *change_stream*)
                            echo "TODO CXX-1201, enable for servers that support change streams"
                            ;;
                          *client_session*)
                            echo "TODO CXX-1201, enable for servers that support change streams"
                            ;;
                          *with_transaction*)
                            echo "TODO CXX-1201, enable for servers that support transactions"
                            ;;
                          *)
                            ${test_params} $test
                            ;;
                        esac
                      done
                  fi

                  cd ..
                  export CMAKE_PREFIX_PATH=$PREFIX:$(pwd)/build/install
                  export PKG_CONFIG_PATH=$PREFIX/lib/pkgconfig:$(pwd)/build/install/lib/pkgconfig
                  export USE_STATIC_LIBS="${USE_STATIC_LIBS}"
                  export BUILD_TYPE="${build_type}"

                  export CXXFLAGS="${example_projects_cxxflags}"
                  export LDFLAGS="${example_projects_ldflags}"
                  export CC="${example_projects_cc}"
                  export CXX="${example_projects_cxx}"
                  export CXX_STANDARD="${example_projects_cxx_standard}"
                  if [ "Windows_NT" == "$OS" ]; then
                      export MSVC=1
                  elif [ "$(uname -s | tr '[:upper:]' '[:lower:]')" == "darwin" ]; then
                      export DYLD_LIBRARY_PATH="$(pwd)/build/install/lib:$DYLD_LIBRARY_PATH"
                  else
                      export LD_LIBRARY_PATH="$(pwd)/build/install/lib:$LD_LIBRARY_PATH"
                  fi
                  # The example projects never run under valgrind, since we haven't added execution
                  # logic to handle ${test_params}.
                  MONGOC_VERSION=${mongoc_version|master} .evergreen/build_example_projects.sh

    "test auth":
        - command: shell.exec
          params:
              shell: bash
              working_dir: "mongo-cxx-driver"
              script: |
                  set -o errexit
                  set -o pipefail
                  export PATH="${extra_path}:$PATH"
                  cd build
                  export PREFIX=$(pwd)/../../mongoc

                  # Use PATH / LD_LIBRARY_PATH / DYLD_LIBRARY_PATH to inform the tests where to find
                  # mongoc library dependencies on Windows / Linux / Mac OS, respectively.
                  # Additionally, on Windows, we also need to inform the tests where to find
                  # mongocxx library dependencies.
                  export LD_LIBRARY_PATH=.:$PREFIX/lib/
                  export DYLD_LIBRARY_PATH=.:$PREFIX/lib/
                  export PATH=$(pwd)/src/bsoncxx/${build_type}:$(pwd)/src/mongocxx/${build_type}:$PREFIX/bin:$(pwd)/install/bin:$PATH

                  URI="mongodb://bob:pwd123@localhost"

                  if [ "Windows_NT" == "$OS" ]; then
                      ./examples/mongocxx/${build_type}/connect.exe "$URI"
                  else
                      ./examples/mongocxx/connect "$URI"
                  fi

    "backtrace":
        - command: shell.exec
          params:
            working_dir: "mongo-cxx-driver"
            script: |
              ./etc/debug-core-evergreen.sh
    "upload working dir":
        - command: archive.targz_pack
          params:
            target: "working-dir.tar.gz"
            source_dir: "mongo-cxx-driver"
            include:
            - "./**"
        - command: s3.put
          params:
            aws_key: ${aws_key}
            aws_secret: ${aws_secret}
            local_file: working-dir.tar.gz
            remote_file: mongo-cxx-driver/${build_variant}/${revision}/${version_id}/${build_id}/artifacts/${task_id}-${execution}-working-dir.tar.gz
            bucket: mciuploads
            permissions: public-read
            content_type: ${content_type|application/x-gzip}
            display_name: "working-dir.tar.gz"

    "upload mongo orchestration artifacts":
        - command: shell.exec
          params:
            working_dir: "."
            script: |
              find . -name \*.log | xargs tar czf mongodb-logs.tar.gz
        - command: s3.put
          params:
            aws_key: ${aws_key}
            aws_secret: ${aws_secret}
            local_file: mongodb-logs.tar.gz
            remote_file: mongo-cxx-driver/${build_variant}/${revision}/${version_id}/${build_id}/logs/${task_id}-${execution}-mongodb-logs.tar.gz
            bucket: mciuploads
            permissions: public-read
            content_type: ${content_type|application/x-gzip}
            display_name: "mongodb-logs.tar.gz"

#######################################
#              Post Task              #
#######################################

post:
  - func: "stop_mongod"
  - func: "backtrace"
  # Workaround for CXX-2040
  # - func: "upload working dir"
  - func: "upload mongo orchestration artifacts"

#######################################
#               Tasks                 #
#######################################

tasks:
    - name: lint
      commands:
        - func: "setup"
        - func: "lint"

    - name: compile_and_test_with_shared_libs
      commands:
        - func: "setup"
        - func: "start_mongod"
        - func: "install_c_driver"
        - func: "compile"
          vars:
              RUN_DISTCHECK: 1
        - func: "test"

    - name: compile_with_shared_libs
      commands:
      - func: "setup"
      - func: "start_mongod"
      - func: "install_c_driver"
      - func: "compile"

    - name: compile_and_test_auth_with_shared_libs
      commands:
        - func: "setup"
        - func: "start_mongod"
          vars:
              AUTH: auth
        - func: "install_c_driver"
        - func: "compile"
        - func: "test auth"

    - name: compile_and_test_with_static_libs
      commands:
        - func: "setup"
        - func: "start_mongod"
        - func: "install_c_driver"
        - func: "compile"
          vars:
              USE_STATIC_LIBS: 1
              RUN_DISTCHECK: 1
        - func: "test"
          vars:
              USE_STATIC_LIBS: 1

    - name: compile_and_test_with_shared_libs_replica_set
      commands:
        - func: "setup"
        - func: "start_mongod"
          vars:
              TOPOLOGY: "replica_set"
        - func: "install_c_driver"
        - func: "compile"
          vars:
              RUN_DISTCHECK: 1
        - func: "test"

    - name: uninstall_check
      commands:
      - func: "setup"
      - func: "install_c_driver"
      - func: "compile"
      - command: expansions.update
        params:
          updates:
          - key: mongocxx_version_finder_sh
            value: $(sed -nE 's/^#define MONGOCXX_VERSION_STRING "([^"]+)".*/\1/p' build/src/mongocxx/config/version.hpp)
      - command: shell.exec
        type: test
        params:
          shell: bash
          working_dir: "mongo-cxx-driver"
          script: |-
            set -o errexit
            export INSTALL_VERSION=${mongocxx_version_finder_sh}
            sh ./.evergreen/uninstall_check.sh

    - name: uninstall_check_windows
      commands:
      - func: "setup"
      - func: "install_c_driver"
      - func: "compile"
      - command: expansions.update
        params:
          updates:
          - key: mongocxx_version_finder_sh
            value: $(sed -nE 's/^#define MONGOCXX_VERSION_STRING "([^"]+)".*/\1/p' build/src/mongocxx/config/version.hpp)
      - command: shell.exec
        type: test
        params:
          shell: bash
          working_dir: "mongo-cxx-driver"
          script: |-
            set -o errexit
            export INSTALL_VERSION=${mongocxx_version_finder_sh}
            cmd.exe /c .\\.evergreen\\uninstall_check_windows.cmd

    - name: debian-package-build
      commands:
      - func: "setup"
      - command: shell.exec
        type: test
        params:
          working_dir: "mongo-cxx-driver"
          shell: bash
          script: |-
            set -o errexit
            export IS_PATCH="${is_patch}"
            sh .evergreen/debian_package_build.sh
      - command: s3.put
        params:
          aws_key: ${aws_key}
          aws_secret: ${aws_secret}
          local_file: deb.tar.gz
          remote_file: mongo-cxx-driver/${branch_name}/${revision}/${version_id}/${build_id}/${execution}/debian-packages.tar.gz
          bucket: mciuploads
          permissions: public-read
          content_type: ${content_type|application/x-gzip}
          display_name: "deb.tar.gz"

    - name: debian-package-build-mnmlstc
      commands:
      - func: "setup"
      - command: shell.exec
        type: test
        params:
          working_dir: "mongo-cxx-driver"
          shell: bash
          script: |-
            set -o errexit
            export IS_PATCH="${is_patch}"
            export DEB_BUILD_PROFILES="pkg.mongo-cxx-driver.mnmlstc"
            sh .evergreen/debian_package_build.sh
      - command: s3.put
        params:
          aws_key: ${aws_key}
          aws_secret: ${aws_secret}
          local_file: deb.tar.gz
          remote_file: mongo-cxx-driver/${branch_name}/${revision}/${version_id}/${build_id}/${execution}/debian-packages-mnmlstc.tar.gz
          bucket: mciuploads
          permissions: public-read
          content_type: ${content_type|application/x-gzip}
          display_name: "deb.tar.gz"

#######################################
#           MongoDB Version Matrix    #
#######################################

axes:
    - id: os
      display_name: "OS"
      values:
          - id: "ubuntu-1804"
            display_name: "Ubuntu 18.04 Debug"
            variables:
                extra_path: *linux_extra_path
                cmake_flags: *linux_cmake_flags
                build_type: "Debug"
                tar_options: *linux_tar_options
            run_on:
                - ubuntu1804-build
          - id: "windows-2k8"
            display_name: "Windows (VS 2017) Debug"
            variables:
                extra_path: *msvc2017_extra_path
                cmake_flags: *msvc2017_cmake_flags
                build_type: "Debug"
                tar_options: *linux_tar_options # Same for Windows and Linux
                generator: *msvc2017_generator
                example_projects_cxx_standard: 17
            run_on:
                - windows-64-vs2017-compile

    - id: mongodb_version
      display_name: "MongoDB Version"
      values:
          - id: "latest"
            display_name: "Latest"
            variables:
                mongodb_version: *version_latest
          - id: "4.4"
            display_name: "4.4"
            variables:
                mongodb_version: *version_44
          - id: "4.2"
            display_name: "4.2"
            variables:
                mongodb_version: *version_42
          - id: "4.0"
            display_name: "4.0"
            variables:
                mongodb_version: *version_40


#######################################
#           Buildvariants             #
#######################################

buildvariants:
    #######################################
    #  Standard MongoDB Integration Tests #
    #######################################
    - matrix_name: "integration"
      matrix_spec: {os: "*", mongodb_version: "*"}
      display_name: "${os} (MongoDB ${mongodb_version})"
      tasks:
          - name: compile_and_test_with_shared_libs

    - matrix_name: "auth"
      matrix_spec: {os: "*", mongodb_version: "latest"}
      display_name: "${os} ${mongodb_version} Auth"
      tasks:
          - name: compile_and_test_auth_with_shared_libs

    #######################################
    #         Linux Buildvariants         #
    #######################################
    - name: ubuntu1804-release
      display_name: "Ubuntu 18.04 Release (MongoDB Latest)"
      expansions:
          build_type: "Release"
          tar_options: *linux_tar_options
          extra_path: *linux_extra_path
          cmake_flags: *linux_cmake_flags
          mongodb_version: *version_latest
      run_on:
          - ubuntu1804-build
      tasks:
          - name: lint
          - name: compile_and_test_with_shared_libs
          - name: compile_and_test_with_static_libs
          - name: compile_and_test_with_shared_libs_replica_set
          - name: uninstall_check

    # TODO CXX-2260 Upgrade std::experimental tasks to use Ubuntu 18.04 and mongodb_latest
    # after bug fixes with newer g++ versions.
    - name: ubuntu1604-debug-std-experimental
      display_name: "Ubuntu 16.04 Debug (std::experimental) (MongoDB 4.4)"
      expansions:
          build_type: "Debug"
          tar_options: *linux_tar_options
          extra_path: *linux_extra_path
          cmake_flags: *linux_cmake_flags
          poly_flags: *poly_std_experimental_flags
          mongodb_version: *version_44
          example_projects_cxx_standard: *std_experimental_cxx_standard
      run_on:
          - ubuntu1604-build
      tasks:
          - name: compile_and_test_with_shared_libs
          - name: compile_and_test_with_static_libs

    - name: ubuntu1804-debug-valgrind
      display_name: "Valgrind Ubuntu 18.04 Debug (MongoDB Latest)"
      expansions:
          build_type: "Debug"
          tar_options: *linux_tar_options
          extra_path: *linux_extra_path
          cmake_flags: *linux_cmake_flags
          test_params: *valgrind_test_params
          mongodb_version: *version_latest
          disable_slow_tests: 1
      run_on:
          - ubuntu1804-build
      tasks:
          - name: compile_and_test_with_shared_libs
          - name: compile_and_test_with_static_libs

    - name: ubuntu1804-debug-asan
      display_name: "ASAN Ubuntu 18.04 Debug (MongoDB Latest)"
      expansions:
          build_type: "Debug"
          tar_options: *linux_tar_options
          extra_path: *linux_extra_path
          cmake_flags: *asan_cmake_flags
          test_params: *asan_test_params
          mongodb_version: *version_latest
          example_projects_cc: *asan_cc_path
          example_projects_cxx: *asan_cxx_path
          example_projects_cxxflags: *asan_cxxflags
          example_projects_ldflags: *asan_ldflags
      run_on:
          - ubuntu1804-build
      tasks:
          - name: compile_and_test_with_shared_libs
          - name: compile_and_test_with_static_libs

    - name: ubuntu1804-debug-ubsan
      display_name: "UBSAN Ubuntu 18.04 Debug (MongoDB Latest)"
      expansions:
          build_type: "Debug"
          tar_options: *linux_tar_options
          extra_path: *linux_extra_path
          cmake_flags: *ubsan_cmake_flags
          test_params: *ubsan_test_params
          mongodb_version: *version_latest
          example_projects_cc: *ubsan_cc_path
          example_projects_cxx: *ubsan_cxx_path
          example_projects_cxxflags: *ubsan_cxxflags
          example_projects_ldflags: *ubsan_ldflags
      run_on:
          - ubuntu1804-build
      tasks:
          # We currently don't run UBSAN on the shared library due to issues with UBSAN reporting
          # numerous false positive instances of undefined behavior in the mock tests, when the
          # driver invokes mock callback functions that have libmongoc types in the callback
          # signature.
          - name: compile_and_test_with_static_libs

    - name: ubuntu1604-zseries
      display_name: "s390x Ubuntu 16.04 (MongoDB Latest)"
      batchtime: 1440 # 1 day
      expansions:
          build_type: "Release"
          tar_options: *linux_tar_options
          cmake_flags: *linux_cmake_flags
          mongodb_version: *version_latest
      run_on:
          - ubuntu1604-zseries-small
      tasks:
          - name: compile_and_test_with_shared_libs
          - name: compile_and_test_with_static_libs

    - name: power8-ubuntu1604
      display_name: "ppc64le Ubuntu 16.04 (MongoDB Latest)"
      batchtime: 1440 # 1 day
      expansions:
          build_type: "Release"
          tar_options: *linux_tar_options
          cmake_flags: *linux_cmake_flags
          mongodb_version: *version_latest
      run_on:
          - ubuntu1604-power8-build
      tasks:
          # Once BUILD-11375 is resolved, add upgrade to Ubuntu 18.04 and add tests back.
          - name: compile_with_shared_libs
          #- name: compile_and_test_with_shared_libs
          #- name: compile_and_test_with_static_libs

    - name: arm-ubuntu1804
      display_name: "arm64 Ubuntu 18.04 (MongoDB Latest)"
      batchtime: 1440 # 1 day
      expansions:
          build_type: "Release"
          tar_options: *linux_tar_options
          cmake_flags: *linux_cmake_flags
          mongodb_version: *version_latest
      run_on:
          - ubuntu1804-arm64-build
      tasks:
          - name: compile_and_test_with_shared_libs
          - name: compile_and_test_with_static_libs

    # Test that we actually support building against the minium required C version claimed.
    - name: ubuntu1804-min-libmongoc
      display_name: "Ubuntu 18.04 with minimum libmongoc (MongoDB 4.4)"
      batchtime: 1440 # 1 day
      expansions:
          build_type: "Debug"
          tar_options: *linux_tar_options
          cmake_flags: *linux_cmake_flags
          mongodb_version: *version_latest
          mongoc_version: "1.17.0-beta2"
      run_on:
          - ubuntu1804-build
      tasks:
          - name: compile_and_test_with_shared_libs
          - name: compile_and_test_with_static_libs

    #######################################
    #         Mac and Windows             #
    #######################################
    - name: macos-1014
      display_name: "MacOS 10.14 Release (Boost) (MongoDB Latest)"
      expansions:
          build_type: "Release"
          extra_path: *macos_extra_path
          cmake_flags: *macos_cmake_flags
          poly_flags: *poly_boost_flags
          mongodb_version: *version_latest
      run_on:
          - macos-1014
      tasks:
          - name: compile_and_test_with_shared_libs
          - name: compile_and_test_with_static_libs

    - name: windows-2k8-release
      display_name: "Windows (VS 2015) Release (MongoDB 4.2)"
      expansions:
          build_type: "Release"
          tar_options: *linux_tar_options
          extra_path: *msvc2015_extra_path
          cmake_flags: *msvc2015_cmake_flags
          mongodb_version: *version_42
          generator: *msvc2015_generator
      run_on:
          - windows-64-vs2015-compile
      tasks:
          - name: compile_and_test_with_shared_libs
          - name: compile_and_test_with_static_libs
          - name: uninstall_check_windows

    - name: windows-2k8-debug
      display_name: "Windows (VS 2015) Debug Static (MongoDB 4.2)"
      expansions:
          build_type: "Debug"
          tar_options: *linux_tar_options
          extra_path: *msvc2015_extra_path
          cmake_flags: *msvc2015_cmake_flags
          mongodb_version: *version_42
          generator: *msvc2015_generator
      run_on:
          - windows-64-vs2015-compile
      tasks:
          # The debug shared lib is tested in the "integration tests" matrix
          - name: compile_and_test_with_static_libs

    - name: windows-msvc2015-debug
      display_name: "Windows (VS 2015) Debug (MongoDB 4.2)"
      expansions:
          build_type: "Debug"
          tar_options: *linux_tar_options
          extra_path: *msvc2015_extra_path
          cmake_flags: *msvc2015_cmake_flags
          generator: *msvc2015_generator
          mongodb_version: *version_42
      run_on:
         - windows-64-vs2015-compile
      tasks:
         - name: compile_with_shared_libs
         - name: compile_and_test_auth_with_shared_libs

    - name: packaging
      display_name: Linux Distro Packaging
      run_on: ubuntu1804-test
      tasks:
         - name: debian-package-build
         - name: debian-package-build-mnmlstc
