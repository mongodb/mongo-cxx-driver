#######################################
#      CXX Driver Config for MCI      #
#######################################

#######################################
#            Variables                #
#######################################
variables:

    mongoc_version_default: &mongoc_version_default "1.24.0"

    # If updating mongoc_version_minimum, also update:
    # - the default value of --c-driver-build-ref in etc/make_release.py
    # - LIBMONGOC_REQUIRED_VERSION in src/mongocxx/CMakeLists.txt
    mongoc_version_minimum: &mongoc_version_minimum "1.24.0"

    mongodb_version:
        version_latest: &version_latest "latest"
        version_60: &version_60 "6.0"
        version_50: &version_50 "5.0"
        version_44: &version_44 "4.4"
        version_42: &version_42 "4.2"
        version_40: &version_40 "4.0"

    ## cmake path variables
    extra_path:
        linux_extra_path: &linux_extra_path /opt/cmake/bin
        macos_extra_path: &macos_extra_path /Applications/Cmake.app/Contents/bin
        msvc2015_extra_path: &msvc2015_extra_path "/cygdrive/c/cmake/bin:/cygdrive/c/Program Files (x86)/MSBuild/14.0/Bin"
        msvc2017_extra_path: &msvc2017_extra_path "/cygdrive/c/cmake/bin:/cygdrive/c/Program Files (x86)/Microsoft Visual Studio/2017/Professional/MSBuild/15.0/Bin"

    ## tar options variables
    tar_options:
        linux_tar_options: &linux_tar_options --wildcards --no-anchored

    ## cmake flag variables
    cmake_flags:
        linux_cmake_flags: &linux_cmake_flags -DCMAKE_C_FLAGS="-Wall -Wextra -Wno-attributes -Werror -Wno-missing-field-initializers $ignore_deprecated" -DCMAKE_CXX_FLAGS="-Wall -Wextra -Wconversion -Wnarrowing -Wno-expansion-to-defined -pedantic -Werror -Wno-missing-field-initializers -Wno-aligned-new $ignore_deprecated"
        macos_cmake_flags: &macos_cmake_flags -DCMAKE_C_FLAGS="-Wall -Wextra -Wno-attributes -Werror -Wno-missing-field-initializers $ignore_deprecated" -DCMAKE_CXX_FLAGS="-stdlib=libc++ -Wall -Wextra -Wconversion -Wnarrowing -pedantic -Werror $ignore_deprecated"
        asan_cmake_flags: &asan_cmake_flags -DCMAKE_C_FLAGS="-Wall -Wextra -Wno-attributes -Werror -Wno-missing-field-initializers $ignore_deprecated" -DCMAKE_CXX_COMPILER="/usr/bin/clang++" -DCMAKE_CXX_FLAGS="-D_GLIBCXX_USE_CXX11_ABI=0 -fsanitize=address -O1 -g -fno-omit-frame-pointer -Wall -Wextra -Wconversion -Wnarrowing -pedantic -Werror $ignore_deprecated"
        ubsan_cmake_flags: &ubsan_cmake_flags -DCMAKE_C_FLAGS="-Wall -Wextra -Wno-attributes -Werror -Wno-missing-field-initializers $ignore_deprecated" -DCMAKE_CXX_COMPILER="/usr/bin/clang++" -DCMAKE_CXX_FLAGS="-D_GLIBCXX_USE_CXX11_ABI=0 -fsanitize=undefined -fsanitize-blacklist=$(pwd)/etc/ubsan.ignorelist -fno-sanitize-recover=undefined -O1 -g -fno-omit-frame-pointer -Wall -Wextra -Wconversion -Wnarrowing -pedantic -Werror $ignore_deprecated"
        msvc2015_cmake_flags: &msvc2015_cmake_flags -DBOOST_ROOT=c:/local/boost_1_60_0
        msvc2015_generator: &msvc2015_generator Visual Studio 14 2015 Win64
        msvc2017_cmake_flags: &msvc2017_cmake_flags -DCMAKE_CXX_STANDARD=17
        msvc2017_generator: &msvc2017_generator Visual Studio 15 2017 Win64
        code_coverage_cmake_flags: &code_coverage_cmake_flags -DENABLE_CODE_COVERAGE=ON

        # power8_cmake_flags includes -Wno-maybe-uninitialized to ignore a warning from the std::optional implementation of MNMLSTC.
        power8_cmake_flags: &power8_cmake_flags -DCMAKE_C_FLAGS="-Wall -Wextra -Wno-attributes -Werror -Wno-missing-field-initializers $ignore_deprecated" -DCMAKE_CXX_FLAGS="-Wall -Wextra -Wconversion -Wnarrowing -Wno-expansion-to-defined -pedantic -Werror -Wno-missing-field-initializers -Wno-aligned-new $ignore_deprecated -Wno-error=maybe-uninitialized"

    example_projects_cc:
        asan_cc_path: &asan_cc_path /usr/bin/clang
        ubsan_cc_path: &ubsan_cc_path /usr/bin/clang

    example_projects_cxx:
        asan_cxx_path: &asan_cxx_path /usr/bin/clang++
        ubsan_cxx_path: &ubsan_cxx_path /usr/bin/clang++

    example_projects_cxxflags:
        asan_cxxflags: &asan_cxxflags -D_GLIBCXX_USE_CXX11_ABI=0 -fsanitize=address -fno-omit-frame-pointer
        ubsan_cxxflags: &ubsan_cxxflags -D_GLIBCXX_USE_CXX11_ABI=0 -fsanitize=undefined -fno-sanitize-recover=undefined -fno-omit-frame-pointer

    example_projects_ldflags:
        asan_ldflags: &asan_ldflags -fsanitize=address
        ubsan_ldflags: &ubsan_ldflags -fsanitize=undefined -fno-sanitize-recover=undefined

    example_projects_cxx_standard:
        std_experimental_cxx_standard: &std_experimental_cxx_standard 14

    poly_flags:
        poly_boost_flags: &poly_boost_flags -DBSONCXX_POLY_USE_BOOST=ON
        poly_std_experimental_flags: &poly_std_experimental_flags -DBSONCXX_POLY_USE_STD_EXPERIMENTAL=ON -DCMAKE_CXX_STANDARD=14
        poly_mnmlstc: &poly_mnmlstc -DBSONCXX_POLY_USE_MNMLSTC=ON

    ## test parameters
    test_params:
        asan_test_params: &asan_test_params PATH="/usr/lib/llvm-3.8/bin" ASAN_OPTIONS="detect_leaks=1"
        ubsan_test_params: &ubsan_test_params PATH="/usr/lib/llvm-3.8/bin" UBSAN_OPTIONS="print_stacktrace=1"
        valgrind_test_params: &valgrind_test_params valgrind --leak-check=full --track-origins=yes --num-callers=50 --error-exitcode=1 --error-limit=no --read-var-info=yes --suppressions=../etc/memcheck.suppressions


#######################################
#            Functions                #
#######################################

functions:
    "setup":
        - command: shell.exec
          params:
              shell: bash
              script: |
                 set -o errexit
                 set -o pipefail
                 rm -rf "mongo-cxx-driver"
                 rm -fr "mongo-c-driver"
                 rm -fr mongod
                 rm -fr drivers-evergreen-tools
        - command: git.get_project
          params:
              directory: "mongo-cxx-driver"
        - command: shell.exec
          params:
              shell: bash
              working_dir: "."
              script: |
                 set -o errexit
                 set -o pipefail
                 cc --version || true
                 c++ --version || true
                 gcc --version || true
                 g++ --version || true
                 clang --version || true
                 cmake --version || true
                 openssl version || true

    "build_mongohouse":
        command: shell.exec
        params:
            shell: bash
            script: |
                if [ ! -d "drivers-evergreen-tools" ]; then
                    git clone git@github.com:mongodb-labs/drivers-evergreen-tools.git
                fi
                cd drivers-evergreen-tools
                export DRIVERS_TOOLS=$(pwd)

                sh .evergreen/atlas_data_lake/build-mongohouse-local.sh

    "run_mongohouse":
        command: shell.exec
        params:
            shell: bash
            background: true
            script: |
                cd drivers-evergreen-tools
                export DRIVERS_TOOLS=$(pwd)

                sh .evergreen/atlas_data_lake/run-mongohouse-local.sh

    "test_mongohouse":
        command: shell.exec
        params:
            shell: bash
            working_dir: "mongo-cxx-driver"
            script: |
                echo "testing that mongohouse is running..."
                ps aux | grep mongohouse

                cd build
                export PREFIX=$(pwd)/../../mongoc

                # Use LD_LIBRARY_PATH to inform the tests where to find dependencies on Linux.
                # This task only runs on Linux.
                if [ -n "${lib_dir}" ]; then
                    export LD_LIBRARY_PATH=.:$PREFIX/${lib_dir}/
                else
                    export LD_LIBRARY_PATH=.:$PREFIX/lib/
                fi

                export MONGOHOUSE_TESTS_PATH="$(pwd)/../data/mongohouse"

                ulimit -c unlimited || true

                ./src/mongocxx/test/test_mongohouse_specs

    "start_mongod":
      - command: shell.exec
        params:
            shell: bash
            working_dir: "."
            script: |
                set -o errexit
                set -o pipefail
                if [ ! -d "drivers-evergreen-tools" ]; then
                    git clone git@github.com:mongodb-labs/drivers-evergreen-tools.git
                fi
                cd drivers-evergreen-tools
                # The legacy shell is only present in server 5.0 builds and earlier,
                # but there is no 5.0 build for RHEL9, so we have to avoid it
                if [[ "${build_variant}" =~ "rhel9" ]]; then
                    export SKIP_LEGACY_SHELL=1
                fi
                export DRIVERS_TOOLS=$(pwd)
                if [ "Windows_NT" == "$OS" ]; then
                    export DRIVERS_TOOLS=$(cygpath -m $DRIVERS_TOOLS)
                fi
                export MONGODB_BINARIES=$DRIVERS_TOOLS/mongodb/bin
                export MONGO_ORCHESTRATION_HOME=$DRIVERS_TOOLS/.evergreen/orchestration
                export MONGODB_VERSION=${mongodb_version}
                export AUTH=${AUTH}
                export TOPOLOGY=${TOPOLOGY|server}
                export REQUIRE_API_VERSION=${REQUIRE_API_VERSION}
                export ORCHESTRATION_FILE=${ORCHESTRATION_FILE}
                export PATH="$MONGODB_BINARIES:$PATH"

                echo "{ \"releases\": { \"default\": \"$MONGODB_BINARIES\" }}" > $MONGO_ORCHESTRATION_HOME/orchestration.config
                ./.evergreen/run-orchestration.sh

                # Ensure server on port 27017 is the primary server.
                if [[ "$TOPOLOGY" == replica_set ]]; then
                  # Replset members should be on the following ports.
                  declare hosts="localhost:27017,localhost:27018,localhost:27019"

                  # Authentication may be required.
                  declare creds
                  if [[ -n "$AUTH" ]]; then
                    creds="bob:pwd123@"
                  else
                    creds=""
                  fi

                  declare uri
                  printf -v uri "mongodb://%s%s" "$creds" "$hosts"

                  # Raise the priority of the member on port 27017. Others should have priority 1.
                  declare script
                  printf -v script "%s\n%s\n%s\n" \
                    "let c = rs.conf()" \
                    "c.members.find((m) => m.host.includes('27017')).priority = 10" \
                    "rs.reconfig(c)"

                  mongosh --quiet "$uri" --eval "$script"

                  # Wait up to a minute for member on port 27017 to become primary.
                  wait_for_primary() {
                    for _ in $(seq 60); do
                      if mongosh --quiet "$uri" --eval "quit(rs.hello().primary.includes('27017') ? 0 : 1)"; then
                        return 0
                      else
                        sleep 1
                      fi
                    done
                    echo "Could not set replset member on port 27017 as primary"
                    return 1
                  }
                  echo "Waiting for replset member 27017 to become primary..."
                  wait_for_primary
                  echo "Waiting for replset member 27017 to become primary... done."
                fi

                # Copy mongocryptd up so other functions can find it later, since we can't share PATHs
                if [ -f $MONGODB_BINARIES/mongocryptd ]; then
                    cp $MONGODB_BINARIES/mongocryptd ../mongocryptd
                fi

                cd ../
                pwd
      - command: expansions.update
        params:
          type: setup
          file: drivers-evergreen-tools/mo-expansion.yml


    "stop_mongod":
        command: shell.exec
        params:
            shell: bash
            working_dir: "."
            script: |
                set -o errexit
                set -o pipefail
                if cd drivers-evergreen-tools/.evergreen/orchestration; then
                  . ../venv-utils.sh
                  if venvactivate venv; then
                    mongo-orchestration stop
                  fi
                fi

    "install_c_driver":
      - command: expansions.update
        type: setup
        params:
          updates:
            - key: mongoc_version_default
              value: *mongoc_version_default
      - command: shell.exec
        type: setup
        params:
            shell: bash
            add_expansions_to_env: true
            script: mongo-cxx-driver/.evergreen/install_c_driver.sh

    "lint":
        - command: shell.exec
          params:
              shell: bash
              working_dir: "mongo-cxx-driver"
              script: |
                  set -o errexit
                  set -o pipefail
                  python etc/clang_format.py lint

    "clang-tidy":
      - command: shell.exec
        params:
          shell: bash
          working_dir: "mongo-cxx-driver"
          script: |
            set -o errexit
            set -o pipefail
            ./etc/run-clang-tidy.sh

    "clone_drivers-evergreen-tools":
      - command: shell.exec
        params:
          shell: bash
          script: |-
            set -o errexit
            if [ ! -d "drivers-evergreen-tools" ]; then
                git clone git@github.com:mongodb-labs/drivers-evergreen-tools.git --depth=1
            fi

    "run_kms_servers":
      - command: shell.exec
        params:
          shell: bash
          script: |-
            set -o errexit
            echo "Preparing CSFLE venv environment..."
            cd ./drivers-evergreen-tools/.evergreen/csfle
            # This function ensures future invocations of activate-kmstlsvenv.sh conducted in
            # parallel do not race to setup a venv environment; it has already been prepared.
            # This primarily addresses the situation where the "test" and "run_kms_servers"
            # functions invoke 'activate-kmstlsvenv.sh' simultaneously.
            if [[ "$OSTYPE" =~ cygwin && ! -d kmstlsvenv ]]; then
                # Avoid using Python 3.10 on Windows due to incompatible cipher suites.
                # See CXX-2628.
                . ../venv-utils.sh
                venvcreate "C:/python/Python39/python.exe" kmstlsvenv || # windows-2017
                venvcreate "C:/python/Python38/python.exe" kmstlsvenv    # windows-2015
                python -m pip install --upgrade boto3~=1.19 pykmip~=0.10.0 "sqlalchemy<2.0.0"
                deactivate
            else
                . ./activate-kmstlsvenv.sh
                deactivate
            fi
            echo "Preparing CSFLE venv environment... done."
      - command: shell.exec
        params:
          background: true
          shell: bash
          script: |-
            set -o errexit
            echo "Starting mock KMS servers..."
            cd ./drivers-evergreen-tools/.evergreen/csfle
            . ./activate-kmstlsvenv.sh
            python -u kms_http_server.py --ca_file ../x509gen/ca.pem --cert_file ../x509gen/server.pem --port 8999 &
            python -u kms_http_server.py --ca_file ../x509gen/ca.pem --cert_file ../x509gen/expired.pem --port 9000 &
            python -u kms_http_server.py --ca_file ../x509gen/ca.pem --cert_file ../x509gen/wrong-host.pem --port 9001 &
            python -u kms_http_server.py --ca_file ../x509gen/ca.pem --cert_file ../x509gen/server.pem --port 9002 --require_client_cert &
            python -u kms_kmip_server.py &
            echo "Starting mock KMS servers... done."

    "compile":
        - command: shell.exec
          params:
              shell: bash
              working_dir: "mongo-cxx-driver"
              include_expansions_in_env: ["distro_id"]
              script: |
                  set -o errexit
                  set -o pipefail
                  export BUILD_TYPE=${build_type}
                  export PATH="${extra_path}:$PATH"
                  export RUN_DISTCHECK=${RUN_DISTCHECK}

                  ADDL_OPTS=${code_coverage_cmake_flags}
                  if [ "${USE_STATIC_LIBS}" ]; then
                      ADDL_OPTS="$ADDL_OPTS -DBUILD_SHARED_LIBS=OFF"
                  fi

                  if [ "${ENABLE_TESTS}" = "OFF" ]; then
                      ADDL_OPTS="$ADDL_OPTS -DENABLE_TESTS=OFF"
                  fi

                  if [[ -n "${REQUIRED_CXX_STANDARD}" ]]; then
                      ADDL_OPTS="$ADDL_OPTS -DCMAKE_CXX_STANDARD=${REQUIRED_CXX_STANDARD} -DCMAKE_CXX_STANDARD_REQUIRED=ON"
                  fi

                  MONGOC_PREFIX="$(pwd)/../mongoc"
                  echo "MONGOC_PREFIX=$MONGOC_PREFIX"

                  if [[ "$OSTYPE" =~ cygwin ]]; then
                      MONGOC_PREFIX=$(cygpath -m "$MONGOC_PREFIX")
                  fi
                  . "$MONGOC_PREFIX/.evergreen/scripts/find-cmake-latest.sh"
                  declare cmake_binary
                  export cmake_binary="$(find_cmake_latest)"
                  command -v "$cmake_binary"

                  if [ ! -d ../drivers-evergreen-tools ]; then
                    git clone --depth 1 git@github.com:mongodb-labs/drivers-evergreen-tools.git ../drivers-evergreen-tools
                  fi
                  . ../drivers-evergreen-tools/.evergreen/find-python3.sh
                  . ../drivers-evergreen-tools/.evergreen/venv-utils.sh

                  venvcreate "$(find_python3)" venv
                  python -m pip install GitPython

                  export GENERATOR="${generator}"

                  if [ "$(echo ${branch_name} | cut -f2 -d'/')" != "${branch_name}" ]; then
                      # ignore deprecation warnings when building on a release branch
                      ignore_deprecated=-Wno-deprecated-declarations
                  fi

                  .evergreen/compile.sh -DCMAKE_PREFIX_PATH="$MONGOC_PREFIX" ${cmake_flags} ${poly_flags} $ADDL_OPTS -DCMAKE_INSTALL_PREFIX=install

    "test":
        - command: shell.exec
          params:
              shell: bash
              working_dir: "mongo-cxx-driver"
              include_expansions_in_env: ["distro_id"]
              script: |
                  set -o errexit
                  set -o pipefail

                  # Grabs the mongocryptd path
                  pushd ..
                  export MONGOCRYPTD_PATH=$(pwd)/
                  if [[ "$OSTYPE" =~ cygwin ]]; then
                     export MONGOCRYPTD_PATH=$(cygpath -m $MONGOCRYPTD_PATH)
                  fi
                  popd # ..

                  export PATH="${extra_path}:$PATH"

                  pushd build
                  export PREFIX=$(pwd)/../../mongoc

                  # Use PATH / LD_LIBRARY_PATH / DYLD_LIBRARY_PATH to inform the tests where to find
                  # mongoc library dependencies on Windows / Linux / Mac OS, respectively.
                  # Additionally, on Windows, we also need to inform the tests where to find
                  # mongocxx library dependencies.
                  if [ -n "${lib_dir}" ]; then
                     export LD_LIBRARY_PATH=.:$PREFIX/${lib_dir}/
                     export DYLD_LIBRARY_PATH=.:$PREFIX/${lib_dir}/
                  else
                     export LD_LIBRARY_PATH=.:$PREFIX/lib/
                     export DYLD_LIBRARY_PATH=.:$PREFIX/lib/
                  fi
                  export PATH=$(pwd)/src/bsoncxx/${build_type}:$(pwd)/src/mongocxx/${build_type}:$PREFIX/bin:$(pwd)/install/bin:$PATH

                  export CHANGE_STREAMS_UNIFIED_TESTS_PATH="$(pwd)/../data/change-streams/unified"
                  export CLIENT_SIDE_ENCRYPTION_LEGACY_TESTS_PATH="$(pwd)/../data/client_side_encryption/legacy"
                  export CLIENT_SIDE_ENCRYPTION_TESTS_PATH="$(pwd)/../data/client_side_encryption"
                  export CLIENT_SIDE_ENCRYPTION_UNIFIED_TESTS_PATH="$(pwd)/../data/client_side_encryption/unified"
                  export COLLECTION_MANAGEMENT_TESTS_PATH="$(pwd)/../data/collection-management"
                  export COMMAND_MONITORING_TESTS_PATH="$(pwd)/../data/command-monitoring"
                  export CRUD_LEGACY_TESTS_PATH="$(pwd)/../data/crud/legacy"
                  export CRUD_UNIFIED_TESTS_PATH="$(pwd)/../data/crud/unified"
                  export GRIDFS_TESTS_PATH="$(pwd)/../data/gridfs"
                  export INITIAL_DNS_SEEDLIST_DISCOVERY_TESTS_PATH="$(pwd)/../data/initial_dns_seedlist_discovery"
                  export READ_WRITE_CONCERN_OPERATION_TESTS_PATH="$(pwd)/../data/read-write-concern/operation"
                  export RETRYABLE_READS_LEGACY_TESTS_PATH="$(pwd)/../data/retryable-reads/legacy"
                  export RETRYABLE_READS_UNIFIED_TESTS_PATH="$(pwd)/../data/retryable-reads/unified"
                  export RETRYABLE_WRITES_UNIFIED_TESTS_PATH="$(pwd)/../data/retryable-writes/unified"
                  export SESSION_UNIFIED_TESTS_PATH="$(pwd)/../data/sessions/unified"
                  export TRANSACTIONS_TESTS_PATH="$(pwd)/../data/transactions"
                  export UNIFIED_FORMAT_TESTS_PATH=$(pwd)/../data/unified-format
                  export URI_OPTIONS_TESTS_PATH="$(pwd)/../data/uri-options"
                  export VERSIONED_API_TESTS_PATH=$(pwd)/../data/versioned-api
                  export WITH_TRANSACTION_TESTS_PATH="$(pwd)/../data/with_transaction"

                  export MONGODB_API_VERSION="${MONGODB_API_VERSION}"

                  pushd ../../drivers-evergreen-tools
                  export DRIVERS_TOOLS=$(pwd)
                  if [[ "$OSTYPE" =~ cygwin ]]; then
                      export DRIVERS_TOOLS=$(cygpath -m $DRIVERS_TOOLS)
                  fi
                  popd # ../../drivers-evergreen-tools

                  export MONGOCXX_TEST_TLS_CA_FILE="$DRIVERS_TOOLS/.evergreen/x509gen/ca.pem"

                  if [ "$(uname -m)" == "ppc64le" ]; then
                      echo "Skipping CSFLE test setup (CDRIVER-4246/CXX-2423)"
                  else
                      # export environment variables for encryption tests
                      set +o errexit

                      # Avoid printing credentials in logs.
                      set +o xtrace

                      echo "Setting temporary credentials..."
                      pushd "$DRIVERS_TOOLS/.evergreen/csfle"
                      export AWS_SECRET_ACCESS_KEY="${cse_aws_secret_access_key}"
                      export AWS_ACCESS_KEY_ID="${cse_aws_access_key_id}"
                      export AWS_DEFAULT_REGION="us-east-1"
                      echo "Running activate-kmstlsvenv.sh..."
                      . ./activate-kmstlsvenv.sh
                      echo "Running activate-kmstlsvenv.sh... done."
                      echo "Running set-temp-creds.sh..."
                      . ./set-temp-creds.sh
                      echo "Running set-temp-creds.sh... done."
                      deactivate
                      popd # "$DRIVERS_TOOLS/.evergreen/csfle"
                      echo "Setting temporary credentials... done."

                      # Ensure temporary credentials were properly set.
                      if [ -z "$CSFLE_AWS_TEMP_ACCESS_KEY_ID" ]; then
                        echo "Failed to set temporary credentials!"
                        exit 1
                      fi

                      export MONGOCXX_TEST_CSFLE_TLS_CA_FILE=$DRIVERS_TOOLS/.evergreen/x509gen/ca.pem
                      export MONGOCXX_TEST_CSFLE_TLS_CERTIFICATE_KEY_FILE=$DRIVERS_TOOLS/.evergreen/x509gen/client.pem
                      export MONGOCXX_TEST_AWS_TEMP_ACCESS_KEY_ID="$CSFLE_AWS_TEMP_ACCESS_KEY_ID"
                      export MONGOCXX_TEST_AWS_TEMP_SECRET_ACCESS_KEY="$CSFLE_AWS_TEMP_SECRET_ACCESS_KEY"
                      export MONGOCXX_TEST_AWS_TEMP_SESSION_TOKEN="$CSFLE_AWS_TEMP_SESSION_TOKEN"
                      export MONGOCXX_TEST_AWS_SECRET_ACCESS_KEY="${cse_aws_secret_access_key}"
                      export MONGOCXX_TEST_AWS_ACCESS_KEY_ID="${cse_aws_access_key_id}"
                      export MONGOCXX_TEST_AZURE_TENANT_ID="${cse_azure_tenant_id}"
                      export MONGOCXX_TEST_AZURE_CLIENT_ID="${cse_azure_client_id}"
                      export MONGOCXX_TEST_AZURE_CLIENT_SECRET="${cse_azure_client_secret}"
                      export MONGOCXX_TEST_GCP_EMAIL="${cse_gcp_email}"
                      export MONGOCXX_TEST_GCP_PRIVATEKEY="${cse_gcp_privatekey}"

                      set -o errexit
                  fi

                  if [ "$(uname -m)" == "ppc64le" ]; then
                      echo "Skipping CSFLE test setup (CDRIVER-4246/CXX-2423)"
                  else
                      # Register CA certificate required by KMS TLS connections.
                      echo "Registering CA certificate for KMS TLS tests..."
                      register_ca_cert() {
                          local OS=$(uname -s | tr '[:upper:]' '[:lower:]')
                          echo "register_ca_cert: OS: $OS"
                          case "$OSTYPE" in
                              cygwin*)
                                  certutil.exe -addstore "Root" "$DRIVERS_TOOLS\.evergreen\x509gen\ca.pem"
                                  ;;
                              darwin*)
                                  sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain $DRIVERS_TOOLS/.evergreen/x509gen/ca.pem
                                  ;;
                              *)
                                  if [ -f /etc/redhat-release ]; then
                                      # CSE KMS TLS tests are disabled on RHEL due to sudo permissions. See BUILD-14068.
                                      # sudo cp -v $DRIVERS_TOOLS/.evergreen/x509gen/ca.pem /usr/share/pki/ca-trust-source/anchors/cdriver.crt
                                      # sudo update-ca-trust extract --verbose
                                      export MONGOCXX_TEST_SKIP_KMS_TLS_TESTS=1
                                  else
                                      sudo cp -v $DRIVERS_TOOLS/.evergreen/x509gen/ca.pem /usr/local/share/ca-certificates/cdriver.crt
                                      sudo update-ca-certificates --verbose
                                  fi
                                  ;;
                          esac
                      } >/dev/null
                      register_ca_cert
                      echo "Registering CA certificate for KMS TLS tests... done."

                      # Ensure mock KMS servers are running before starting tests.
                      wait_for_kms_server() {
                          for i in $(seq 60); do
                              # Exit code 7: "Failed to connect to host".
                              if curl -s "localhost:$1"; (($? != 7)); then
                                  return 0
                              else
                                  sleep 1
                              fi
                          done
                          echo "Could not detect mock KMS server on port $1"
                          return 1
                      }
                      echo "Waiting for mock KMS servers to start..."
                      wait_for_kms_server 8999
                      wait_for_kms_server 9000
                      wait_for_kms_server 9001
                      wait_for_kms_server 9002
                      wait_for_kms_server 5698
                      echo "Waiting for mock KMS servers to start... done."
                  fi

                  if [[ "$OSTYPE" =~ cygwin ]]; then
                      CTEST_OUTPUT_ON_FAILURE=1 MSBuild.exe /p:Configuration=${build_type} /verbosity:minimal RUN_TESTS.vcxproj
                      # Only run examples if MONGODB_API_VERSION is unset. We do not append
                      # API version to example clients, so examples will fail when requireApiVersion
                      # is true.
                      if [[ -z "$MONGODB_API_VERSION" ]]; then
                        echo "Running examples..."
                        if ! CTEST_OUTPUT_ON_FAILURE=1 MSBuild.exe /p:Configuration=${build_type} /verbosity:minimal examples/run-examples.vcxproj >|output.txt 2>&1; then
                          # Only emit output on failure.
                          cat output.txt 1>&2
                          exit 1
                        fi
                        echo "Running examples... done."
                      fi
                  else
                      # ENABLE_SLOW_TESTS is required to run the slow tests that are disabled by default. The slow tests should not be run if explicitly disabled.
                      if [ -z "${disable_slow_tests}" ]; then
                          export MONGOCXX_ENABLE_SLOW_TESTS=1
                      fi

                      ulimit -c unlimited || true

                      if [ "${use_mongocryptd}" = "true" ]; then
                          echo "Will run tests using mongocryptd (instead of crypt_shared library)"
                      else
                          echo "Will run tests using crypt_shared library (instead of mongocryptd)"
                          # Set by run-orchestration.sh in "start_mongod".
                          export CRYPT_SHARED_LIB_PATH="${CRYPT_SHARED_LIB_PATH}"
                          echo "CRYPT_SHARED_LIB_PATH=$CRYPT_SHARED_LIB_PATH"
                      fi

                      # Run tests and examples 1-by-1 with "test_params" so we can run them with valgrind.
                      ${test_params} ./src/bsoncxx/test/test_bson
                      ${test_params} ./src/mongocxx/test/test_driver
                      ${test_params} ./src/mongocxx/test/test_client_side_encryption_specs
                      ${test_params} ./src/mongocxx/test/test_crud_specs
                      ${test_params} ./src/mongocxx/test/test_gridfs_specs
                      ${test_params} ./src/mongocxx/test/test_command_monitoring_specs
                      ${test_params} ./src/mongocxx/test/test_instance
                      ${test_params} ./src/mongocxx/test/test_transactions_specs
                      ${test_params} ./src/mongocxx/test/test_logging
                      ${test_params} ./src/mongocxx/test/test_retryable_reads_specs
                      ${test_params} ./src/mongocxx/test/test_read_write_concern_specs
                      ${test_params} ./src/mongocxx/test/test_unified_format_spec


                      # Some platforms like OS X don't support the /mode syntax to the -perm option
                      # of find(1), and some platforms like Ubuntu 16.04 don't support the +mode
                      # syntax, so we use Perl to help us find executable files.
                      EXAMPLES=$(find examples -type f | sort | perl -nlwe 'print if -x')

                      # Only run examples if MONGODB_API_VERSION is unset. We do not append
                      # API version to example clients, so examples will fail when requireApiVersion
                      # is true.
                      if [[ -z "$MONGODB_API_VERSION" ]]; then
                          for test in $EXAMPLES; do
                            echo "Running $test"
                            case "$test" in
                              *encryption*)
                                echo " - Skipping client side encryption example"
                                ;;
                              *change_stream*)
                                echo " - TODO CXX-1201, enable for servers that support change streams"
                                ;;
                              *client_session*)
                                echo " - TODO CXX-1201, enable for servers that support change streams"
                                ;;
                              *with_transaction*)
                                echo " - TODO CXX-1201, enable for servers that support transactions"
                                ;;
                              *causal_consistency*)
                                echo " - TODO CXX-1201, enable for servers that support transactions"
                                ;;
                              *)
                                if ! ${test_params} $test >|output.txt 2>&1; then
                                  # Only emit output on failure.
                                  cat output.txt 1>&2
                                  exit 1
                                fi
                                ;;
                            esac
                          done
                      fi
                  fi

                  popd # ./build

                  export CMAKE_PREFIX_PATH=$PREFIX:$(pwd)/build/install
                  if [ -n "${lib_dir}" ]; then
                     export PKG_CONFIG_PATH=$PREFIX/${lib_dir}/pkgconfig:$(pwd)/build/install/${lib_dir}/pkgconfig
                  else
                     export PKG_CONFIG_PATH=$PREFIX/lib/pkgconfig:$(pwd)/build/install/lib/pkgconfig
                  fi
                  export USE_STATIC_LIBS="${USE_STATIC_LIBS}"
                  export BUILD_TYPE="${build_type}"

                  export CXXFLAGS="${example_projects_cxxflags}"
                  export LDFLAGS="${example_projects_ldflags}"
                  export CC="${example_projects_cc}"
                  export CXX="${example_projects_cxx}"
                  export CXX_STANDARD="${example_projects_cxx_standard}"
                  if [[ "$OSTYPE" =~ cygwin ]]; then
                      export MSVC=1
                  elif [ "$(uname -s | tr '[:upper:]' '[:lower:]')" == "darwin" ]; then
                      export DYLD_LIBRARY_PATH="$(pwd)/build/install/lib:$DYLD_LIBRARY_PATH"
                  else
                      if [ -n "${lib_dir}" ]; then # only needed on Linux
                          export LD_LIBRARY_PATH="$(pwd)/build/install/${lib_dir}:$LD_LIBRARY_PATH"
                      else
                          export LD_LIBRARY_PATH="$(pwd)/build/install/lib:$LD_LIBRARY_PATH"
                      fi
                  fi
                  # The example projects never run under valgrind, since we haven't added execution
                  # logic to handle ${test_params}.
                  #
                  # Only run example projects if MONGODB_API_VERSION is unset. We do not append
                  # API version to example clients, so example projects will fail when requireApiVersion
                  # is true.
                  if [[ -z "$MONGODB_API_VERSION" ]]; then
                    echo "Building example projects..."
                    . "$PREFIX/.evergreen/scripts/find-cmake-latest.sh"
                    declare cmake_binary
                    export cmake_binary="$(find_cmake_latest)"
                    command -v "$cmake_binary"
                    .evergreen/build_example_projects.sh
                    echo "Building example projects... done."
                  fi
                  unset MONGODB_API_VERSION

    "test auth":
        - command: shell.exec
          params:
              shell: bash
              working_dir: "mongo-cxx-driver"
              script: |

                  export MONGOC_INSTALL_PREFIX=$(pwd)/../mongoc
                  export MONGOCXX_INSTALL_PREFIX=$(pwd)/build/install
                  export LIB_DIR=${lib_dir}
                  export BUILD_TYPE=${build_type}
                  export BUILD_DIR=$(pwd)/build
                  export URI="mongodb://bob:pwd123@localhost"
                  ./.evergreen/connect.sh

    "test atlas connectivity":
        - command: shell.exec
          params:
              shell: bash
              working_dir: "mongo-cxx-driver"
              silent: true
              script: |

                  export MONGOC_INSTALL_PREFIX=$(pwd)/../mongoc
                  export MONGOCXX_INSTALL_PREFIX=$(pwd)/build/install
                  export LIB_DIR=${lib_dir}
                  export BUILD_TYPE=${build_type}
                  export BUILD_DIR=$(pwd)/build

                  # The atlas_serverless_uri expansion is set in the Evergreen project settings.
                  export URI="${atlas_serverless_uri}"

                  ./.evergreen/connect.sh

    "backtrace":
        - command: shell.exec
          params:
            working_dir: "mongo-cxx-driver"
            script: |
              ./etc/debug-core-evergreen.sh
    "upload working dir":
        - command: archive.targz_pack
          params:
            target: "working-dir.tar.gz"
            source_dir: "mongo-cxx-driver"
            include:
            - "./**"
        - command: s3.put
          params:
            aws_key: ${aws_key}
            aws_secret: ${aws_secret}
            local_file: working-dir.tar.gz
            remote_file: mongo-cxx-driver/${build_variant}/${revision}/${version_id}/${build_id}/artifacts/${task_id}-${execution}-working-dir.tar.gz
            bucket: mciuploads
            permissions: public-read
            content_type: ${content_type|application/x-gzip}
            display_name: "working-dir.tar.gz"

    "upload mongo orchestration artifacts":
        - command: shell.exec
          params:
            working_dir: "."
            script: |
              find . -name \*.log | xargs tar czf mongodb-logs.tar.gz
        - command: s3.put
          params:
            aws_key: ${aws_key}
            aws_secret: ${aws_secret}
            local_file: mongodb-logs.tar.gz
            remote_file: mongo-cxx-driver/${build_variant}/${revision}/${version_id}/${build_id}/logs/${task_id}-${execution}-mongodb-logs.tar.gz
            bucket: mciuploads
            permissions: public-read
            content_type: ${content_type|application/x-gzip}
            display_name: "mongodb-logs.tar.gz"

    "upload code coverage":
      - command: shell.exec
        params:
          shell: bash
          working_dir: "mongo-cxx-driver"
          script: |
            set -o errexit
            set -o pipefail

            # Nothing to do if code coverage was not enabled.
            if [[ -z "${code_coverage_cmake_flags}" ]]; then
              exit 0
            fi

            # Note: coverage is currently only enabled on the ubuntu-1804 distro.
            # This script does not support MacOS, Windows, or non-x86_64 distros.
            # Update accordingly if code coverage is expanded to other distros.
            curl -Os https://uploader.codecov.io/latest/linux/codecov
            chmod +x codecov

            # -Z: Exit with a non-zero value if error.
            # -g: Run with gcov support.
            # -t: Codecov upload token.
            # perl: filter verbose "Found" list and "Processing" messages.
            ./codecov -Zgt "${codecov_token}" | perl -lne 'print if not m|(^.*\.gcov(\.\.\.)?$)|'

#######################################
#              Post Task              #
#######################################

post:
  - func: "stop_mongod"
  - func: "backtrace"
  # Workaround for CXX-2040
  # - func: "upload working dir"
  - func: "upload mongo orchestration artifacts"
  - func: "upload code coverage"

#######################################
#               Tasks                 #
#######################################

tasks:
    - name: lint
      commands:
        - func: "setup"
        - func: "lint"

    - name: clang-tidy
      commands:
        - func: "setup"
        - func: "install_c_driver"
        - func: "compile"
        - func: "clang-tidy"

    - name: compile_and_test_with_shared_libs
      commands:
        - func: "setup"
        - func: "start_mongod"
        - func: "install_c_driver"
        - func: "compile"
          vars:
              RUN_DISTCHECK: 1
        - func: "clone_drivers-evergreen-tools"
        - func: "run_kms_servers"
        - func: "test"

    - name: compile_and_test_with_shared_libs_extra_alignment
      commands:
        - func: "setup"
        - func: "start_mongod"
        - func: "install_c_driver"
          vars:
              BSON_EXTRA_ALIGNMENT: 1
        - func: "compile"
        - func: "clone_drivers-evergreen-tools"
        - func: "run_kms_servers"
        - func: "test"

    - name: compile_and_test_with_shared_libs_cxx20
      commands:
        - func: "setup"
        - func: "start_mongod"
        - func: "install_c_driver"
        - func: "compile"
          vars:
              RUN_DISTCHECK: 1
              REQUIRED_CXX_STANDARD: 20
        - func: "clone_drivers-evergreen-tools"
        - func: "run_kms_servers"
        - func: "test"
          vars:
              REQUIRED_CXX_STANDARD: 20
              example_projects_cxx_standard: 20

    - name: compile_and_test_with_shared_libs_extra_alignment_cxx20
      commands:
        - func: "setup"
        - func: "start_mongod"
        - func: "install_c_driver"
          vars:
              BSON_EXTRA_ALIGNMENT: 1
        - func: "compile"
          vars:
              REQUIRED_CXX_STANDARD: 20
        - func: "clone_drivers-evergreen-tools"
        - func: "run_kms_servers"
        - func: "test"
          vars:
              REQUIRED_CXX_STANDARD: 20
              example_projects_cxx_standard: 20

    - name: compile_with_shared_libs
      commands:
      - func: "setup"
      - func: "start_mongod"
      - func: "install_c_driver"
      - func: "compile"

    - name: compile_without_tests
      commands:
      - func: "setup"
      - func: "install_c_driver"
      - func: "compile"
        vars:
            ENABLE_TESTS: OFF

    - name: compile_and_test_auth_with_shared_libs
      commands:
        - func: "setup"
        - func: "start_mongod"
          vars:
              AUTH: auth
        - func: "install_c_driver"
        - func: "compile"
        - func: "test auth"
        - func: "test atlas connectivity"

    - name: compile_and_test_with_static_libs
      commands:
        - func: "setup"
        - func: "start_mongod"
        - func: "install_c_driver"
        - func: "compile"
          vars:
              USE_STATIC_LIBS: 1
              RUN_DISTCHECK: 1
        - func: "clone_drivers-evergreen-tools"
        - func: "run_kms_servers"
        - func: "test"
          vars:
              USE_STATIC_LIBS: 1

    - name: compile_and_test_with_static_libs_extra_alignment
      commands:
        - func: "setup"
        - func: "start_mongod"
        - func: "install_c_driver"
          vars:
              BSON_EXTRA_ALIGNMENT: 1
        - func: "compile"
          vars:
              USE_STATIC_LIBS: 1
        - func: "clone_drivers-evergreen-tools"
        - func: "run_kms_servers"
        - func: "test"
          vars:
              USE_STATIC_LIBS: 1

    - name: compile_and_test_with_shared_libs_replica_set
      commands:
        - func: "setup"
        - func: "start_mongod"
          vars:
              TOPOLOGY: "replica_set"
        - func: "install_c_driver"
        - func: "compile"
          vars:
              RUN_DISTCHECK: 1
        - func: "clone_drivers-evergreen-tools"
        - func: "run_kms_servers"
        - func: "test"

    - name: uninstall_check
      commands:
      - func: "setup"
      - func: "install_c_driver"
      - func: "compile"
      - command: expansions.update
        params:
          updates:
          - key: mongocxx_version_finder_sh
            value: $(sed -nE 's/^#define MONGOCXX_VERSION_STRING "([^"]+)".*/\1/p' build/src/mongocxx/config/version.hpp)
      - command: shell.exec
        type: test
        params:
          shell: bash
          working_dir: "mongo-cxx-driver"
          script: |-
            set -o errexit
            export INSTALL_VERSION=${mongocxx_version_finder_sh}
            sh ./.evergreen/uninstall_check.sh

    - name: uninstall_check_windows
      commands:
      - func: "setup"
      - func: "install_c_driver"
      - func: "compile"
      - command: expansions.update
        params:
          updates:
          - key: mongocxx_version_finder_sh
            value: $(sed -nE 's/^#define MONGOCXX_VERSION_STRING "([^"]+)".*/\1/p' build/src/mongocxx/config/version.hpp)
      - command: shell.exec
        type: test
        params:
          shell: bash
          working_dir: "mongo-cxx-driver"
          script: |-
            set -o errexit
            export INSTALL_VERSION=${mongocxx_version_finder_sh}
            cmd.exe /c .\\.evergreen\\uninstall_check_windows.cmd

    - name: build_example_with_add_subdirectory
      commands:
      - func: "setup"
      - func: "start_mongod"
      - command: shell.exec
        type: test
        params:
          working_dir: "mongo-cxx-driver"
          shell: bash
          script: |-
            set -o errexit
            cd examples/add_subdirectory
            [ -d mongo-c-driver ] || git clone --depth 1 https://github.com/mongodb/mongo-c-driver
            rsync -aq --exclude='examples/add_subdirectory' $(readlink -f ../..) .
            [ -d build ] || mkdir build
            . ./mongo-c-driver/.evergreen/scripts/find-cmake-latest.sh
            export CMAKE="$(find_cmake_latest)"
            cd build
            $CMAKE ..
            $CMAKE --build . -- -j 8
            ./hello_mongocxx

    - name: debian-package-build
      commands:
      - func: "setup"
      - command: shell.exec
        type: test
        params:
          working_dir: "mongo-cxx-driver"
          shell: bash
          script: |-
            set -o errexit
            export IS_PATCH="${is_patch}"
            sh .evergreen/debian_package_build.sh
      - command: s3.put
        params:
          aws_key: ${aws_key}
          aws_secret: ${aws_secret}
          local_file: deb.tar.gz
          remote_file: mongo-cxx-driver/${branch_name}/${revision}/${version_id}/${build_id}/${execution}/debian-packages.tar.gz
          bucket: mciuploads
          permissions: public-read
          content_type: ${content_type|application/x-gzip}
          display_name: "deb.tar.gz"

    - name: debian-package-build-mnmlstc
      commands:
      - func: "setup"
      - command: shell.exec
        type: test
        params:
          working_dir: "mongo-cxx-driver"
          shell: bash
          script: |-
            set -o errexit
            export IS_PATCH="${is_patch}"
            export DEB_BUILD_PROFILES="pkg.mongo-cxx-driver.mnmlstc"
            sh .evergreen/debian_package_build.sh
      - command: s3.put
        params:
          aws_key: ${aws_key}
          aws_secret: ${aws_secret}
          local_file: deb.tar.gz
          remote_file: mongo-cxx-driver/${branch_name}/${revision}/${version_id}/${build_id}/${execution}/debian-packages-mnmlstc.tar.gz
          bucket: mciuploads
          permissions: public-read
          content_type: ${content_type|application/x-gzip}
          display_name: "deb.tar.gz"

    - name: rpm-package-build
      commands:
      - func: "setup"
      - command: shell.exec
        type: test
        params:
          working_dir: "mongo-cxx-driver"
          shell: bash
          script: |-
            set -o errexit
            sh .evergreen/build_snapshot_rpm.sh
      - command: s3.put
        params:
          aws_key: ${aws_key}
          aws_secret: ${aws_secret}
          remote_file: mongo-cxx-driver/${branch_name}/${revision}/${version_id}/${build_id}/${execution}/rpm-packages.tar.gz
          bucket: mciuploads
          permissions: public-read
          local_file: rpm.tar.gz
          content_type: ${content_type|application/x-gzip}


    - name: test_mongohouse
      commands:
        - func: "setup"
        - func: "install_c_driver"
        - func: "compile"
        - func: "build_mongohouse"
        - func: "run_mongohouse"
        - func: "test_mongohouse"

    - name: test_versioned_api
      commands:
        - func: "setup"
        - func: "start_mongod"
          vars:
              REQUIRE_API_VERSION: true
              # Authentication with versioned API should already be tested
              # in the C driver.
              AUTH: noauth
        - func: "install_c_driver"
        - func: "compile"
        - func: "clone_drivers-evergreen-tools"
        - func: "run_kms_servers"
        - func: "test"
          vars:
              MONGODB_API_VERSION: 1

    - name: test_versioned_api_accept_version_two
      commands:
        - func: "setup"
        - func: "start_mongod"
          vars:
              ORCHESTRATION_FILE: versioned-api-testing.json
              AUTH: noauth
        - func: "install_c_driver"
        - func: "compile"
        - func: "clone_drivers-evergreen-tools"
        - func: "run_kms_servers"
        - func: "test"

#######################################
#           MongoDB Version Matrix    #
#######################################

axes:
    - id: os
      display_name: "OS"
      values:
          - id: "ubuntu-1804"
            display_name: "Ubuntu 18.04 Debug"
            variables:
                extra_path: *linux_extra_path
                cmake_flags: *linux_cmake_flags
                build_type: "Debug"
                tar_options: *linux_tar_options
                code_coverage_cmake_flags: *code_coverage_cmake_flags
            run_on:
                - ubuntu1804-build
          - id: "windows-2k8"
            display_name: "Windows (VS 2017) Debug"
            variables:
                extra_path: *msvc2017_extra_path
                cmake_flags: *msvc2017_cmake_flags
                build_type: "Debug"
                tar_options: *linux_tar_options # Same for Windows and Linux
                generator: *msvc2017_generator
                example_projects_cxx_standard: 17
            run_on:
                - windows-64-vs2017-compile

    - id: mongodb_version
      display_name: "MongoDB Version"
      values:
          - id: "latest"
            display_name: "Latest"
            variables:
                mongodb_version: *version_latest
          - id: "5.0"
            display_name: "5.0"
            variables:
                mongodb_version: *version_50
          - id: "4.4"
            display_name: "4.4"
            variables:
                mongodb_version: *version_44
          - id: "4.2"
            display_name: "4.2"
            variables:
                mongodb_version: *version_42
          - id: "4.0"
            display_name: "4.0"
            variables:
                mongodb_version: *version_40


#######################################
#           Buildvariants             #
#######################################

buildvariants:
    #######################################
    #  Standard MongoDB Integration Tests #
    #######################################
    - matrix_name: "integration"
      matrix_spec: {os: "*", mongodb_version: "*"}
      display_name: "${os} (MongoDB ${mongodb_version})"
      tasks:
          - name: compile_and_test_with_shared_libs
          - name: compile_and_test_with_shared_libs_extra_alignment

    - matrix_name: "integration (replica set)"
      matrix_spec: {os: "ubuntu-1804", mongodb_version: "*"}
      display_name: "${os} replica set (MongoDB ${mongodb_version})"
      tasks:
        - name: compile_and_test_with_shared_libs_replica_set

    - matrix_name: "auth"
      matrix_spec: {os: "*", mongodb_version: "latest"}
      display_name: "${os} ${mongodb_version} Auth"
      tasks:
          - name: compile_and_test_auth_with_shared_libs

    - matrix_name: "versioned api"
      matrix_spec: {os: "*", mongodb_version: "latest"}
      display_name: "${os} ${mongodb_version} Versioned API"
      tasks:
          - name: test_versioned_api
          - name: test_versioned_api_accept_version_two

    #######################################
    #         Linux Buildvariants         #
    #######################################
    - name: rhel9-release-latest
      display_name: "RHEL 9 Release (MongoDB Latest)"
      expansions:
          build_type: "Release"
          tar_options: *linux_tar_options
          extra_path: *linux_extra_path
          cmake_flags: *linux_cmake_flags
          mongodb_version: *version_latest
          lib_dir: "lib64"
      run_on:
          - rhel90-large
      tasks:
          - name: compile_and_test_with_shared_libs
          - name: compile_and_test_with_shared_libs_extra_alignment
          - name: compile_and_test_with_shared_libs_cxx20
          - name: compile_and_test_with_shared_libs_extra_alignment_cxx20
          - name: compile_and_test_with_static_libs
          - name: compile_and_test_with_static_libs_extra_alignment
          - name: compile_and_test_with_shared_libs_replica_set
          - name: build_example_with_add_subdirectory
            distros:
            - rhel90-large

    - name: arm-rhel9-release-latest
      display_name: "arm64 RHEL 9 Release (MongoDB Latest)"
      expansions:
          build_type: "Release"
          tar_options: *linux_tar_options
          extra_path: *linux_extra_path
          cmake_flags: *linux_cmake_flags
          mongodb_version: *version_latest
          lib_dir: "lib64"
      run_on:
          - rhel90-arm64-large
      tasks:
          - name: compile_and_test_with_shared_libs
          - name: compile_and_test_with_shared_libs_extra_alignment
          - name: compile_and_test_with_shared_libs_cxx20
          - name: compile_and_test_with_shared_libs_extra_alignment_cxx20
          - name: compile_and_test_with_static_libs
          - name: compile_and_test_with_static_libs_extra_alignment
          - name: compile_and_test_with_shared_libs_replica_set
          - name: build_example_with_add_subdirectory
            distros:
            - rhel90-arm64-large

    - name: debian11-release-latest
      display_name: "Debian 11 Release (MongoDB Latest)"
      expansions:
          build_type: "Release"
          tar_options: *linux_tar_options
          extra_path: *linux_extra_path
          cmake_flags: *linux_cmake_flags
          mongodb_version: *version_latest
      run_on:
          - debian11-large
      tasks:
          - name: compile_and_test_with_shared_libs
          - name: compile_and_test_with_shared_libs_extra_alignment
          - name: compile_and_test_with_shared_libs_cxx20
          - name: compile_and_test_with_shared_libs_extra_alignment_cxx20
          - name: compile_and_test_with_static_libs
          - name: compile_and_test_with_static_libs_extra_alignment
          - name: compile_and_test_with_shared_libs_replica_set
          - name: build_example_with_add_subdirectory
            distros:
            - debian11-large
          - name: uninstall_check

    - name: debian11-release-50
      display_name: "Debian 11 Release (MongoDB 5.0)"
      expansions:
          build_type: "Release"
          tar_options: *linux_tar_options
          extra_path: *linux_extra_path
          cmake_flags: *linux_cmake_flags
          mongodb_version: *version_50
      run_on:
          - debian11-large
      tasks:
          - name: compile_and_test_with_shared_libs
          - name: compile_and_test_with_shared_libs_extra_alignment
          - name: compile_and_test_with_shared_libs_cxx20
          - name: compile_and_test_with_shared_libs_extra_alignment_cxx20
          - name: compile_and_test_with_static_libs
          - name: compile_and_test_with_static_libs_extra_alignment
          - name: compile_and_test_with_shared_libs_replica_set
          - name: build_example_with_add_subdirectory
            distros:
            - debian11-large
          - name: uninstall_check

    - name: debian10-release-latest
      display_name: "Debian 10 Release (MongoDB Latest)"
      expansions:
          build_type: "Release"
          tar_options: *linux_tar_options
          extra_path: *linux_extra_path
          cmake_flags: *linux_cmake_flags
          mongodb_version: *version_latest
      run_on:
          - debian10-large
      tasks:
          - name: compile_and_test_with_shared_libs
          - name: compile_and_test_with_shared_libs_extra_alignment
          - name: compile_and_test_with_static_libs
          - name: compile_and_test_with_static_libs_extra_alignment
          - name: compile_and_test_with_shared_libs_replica_set
          - name: build_example_with_add_subdirectory
            distros:
            - debian10-large
          - name: uninstall_check

    - name: debian10-release-50
      display_name: "Debian 10 Release (MongoDB 5.0)"
      expansions:
          build_type: "Release"
          tar_options: *linux_tar_options
          extra_path: *linux_extra_path
          cmake_flags: *linux_cmake_flags
          mongodb_version: *version_50
      run_on:
          - debian10-large
      tasks:
          - name: compile_and_test_with_shared_libs
          - name: compile_and_test_with_shared_libs_extra_alignment
          - name: compile_and_test_with_static_libs
          - name: compile_and_test_with_static_libs_extra_alignment
          - name: compile_and_test_with_shared_libs_replica_set
          - name: build_example_with_add_subdirectory
            distros:
            - debian10-large
          - name: uninstall_check

    # Add matrix for specification test requirement of mongocryptd:
    # "Drivers MUST run all tests with mongocryptd on at least one platform for all tested server versions (4.2+)."
    - matrix_name: "mongocryptd"
      matrix_spec:
        os: "ubuntu-1804"
        mongodb_version: ["4.2", "4.4", "5.0", "latest"]
      display_name: "${os} (MongoDB ${mongodb_version}) with mongocryptd"
      tasks:
          - name: compile_and_test_with_shared_libs
          - name: compile_and_test_with_shared_libs_replica_set
      expansions:
        use_mongocryptd: true

    - name: ubuntu2004-release-latest
      display_name: "Ubuntu 20.04 Release (MongoDB Latest)"
      expansions:
          build_type: "Release"
          tar_options: *linux_tar_options
          extra_path: *linux_extra_path
          cmake_flags: *linux_cmake_flags
          mongodb_version: *version_latest
      run_on:
          - ubuntu2004-large
      tasks:
          - name: compile_and_test_with_shared_libs
          - name: compile_and_test_with_shared_libs_extra_alignment
          - name: compile_and_test_with_static_libs
          - name: compile_and_test_with_static_libs_extra_alignment
          - name: compile_and_test_with_shared_libs_replica_set
          - name: build_example_with_add_subdirectory
            distros:
            - ubuntu2004-large
          - name: uninstall_check

    - name: ubuntu2004-release-50
      display_name: "Ubuntu 20.04 Release (MongoDB 5.0)"
      expansions:
          build_type: "Release"
          tar_options: *linux_tar_options
          extra_path: *linux_extra_path
          cmake_flags: *linux_cmake_flags
          mongodb_version: *version_50
      run_on:
          - ubuntu2004-large
      tasks:
          - name: compile_and_test_with_shared_libs
          - name: compile_and_test_with_shared_libs_extra_alignment
          - name: compile_and_test_with_static_libs
          - name: compile_and_test_with_static_libs_extra_alignment
          - name: compile_and_test_with_shared_libs_replica_set
          - name: build_example_with_add_subdirectory
            distros:
            - ubuntu2004-large
          - name: uninstall_check

    - name: ubuntu1804-release-latest
      display_name: "Ubuntu 18.04 Release (MongoDB Latest)"
      expansions:
          build_type: "Release"
          tar_options: *linux_tar_options
          extra_path: *linux_extra_path
          cmake_flags: *linux_cmake_flags
          mongodb_version: *version_latest
      run_on:
          - ubuntu1804-build
      tasks:
          - name: lint
          - name: compile_and_test_with_shared_libs
          - name: compile_and_test_with_shared_libs_extra_alignment
          - name: compile_and_test_with_static_libs
          - name: compile_and_test_with_static_libs_extra_alignment
          - name: compile_and_test_with_shared_libs_replica_set
          - name: build_example_with_add_subdirectory
            distros:
            - ubuntu1804-build
          - name: uninstall_check

    - name: ubuntu1804-release-50
      display_name: "Ubuntu 18.04 Release (MongoDB 5.0)"
      expansions:
          build_type: "Release"
          tar_options: *linux_tar_options
          extra_path: *linux_extra_path
          cmake_flags: *linux_cmake_flags
          mongodb_version: *version_50
      run_on:
          - ubuntu1804-build
      tasks:
          - name: compile_and_test_with_shared_libs
          - name: compile_and_test_with_shared_libs_extra_alignment
          - name: compile_and_test_with_static_libs
          - name: compile_and_test_with_static_libs_extra_alignment
          - name: compile_and_test_with_shared_libs_replica_set
          - name: build_example_with_add_subdirectory
            distros:
            - ubuntu1804-build
          - name: uninstall_check

    # TODO CXX-2260 Upgrade std::experimental tasks to use Ubuntu 18.04 and mongodb_latest
    # after bug fixes with newer g++ versions.
    - name: ubuntu1604-debug-std-experimental
      display_name: "Ubuntu 16.04 Debug (std::experimental) (MongoDB 4.4)"
      expansions:
          build_type: "Debug"
          tar_options: *linux_tar_options
          extra_path: *linux_extra_path
          cmake_flags: *linux_cmake_flags
          poly_flags: *poly_std_experimental_flags
          mongodb_version: *version_44
          example_projects_cxx_standard: *std_experimental_cxx_standard
          use_mongocryptd: true  # crypt_shared is not available for Ubuntu 16.04
      run_on:
          - ubuntu1604-build
      tasks:
          - name: compile_and_test_with_shared_libs
          - name: compile_and_test_with_shared_libs_extra_alignment
          - name: compile_and_test_with_static_libs
          - name: compile_and_test_with_static_libs_extra_alignment

    - name: ubuntu1804-debug-valgrind-latest
      display_name: "Valgrind Ubuntu 18.04 Debug (MongoDB Latest)"
      expansions:
          build_type: "Debug"
          tar_options: *linux_tar_options
          extra_path: *linux_extra_path
          cmake_flags: *linux_cmake_flags
          test_params: *valgrind_test_params
          mongodb_version: *version_latest
          disable_slow_tests: 1
          use_mongocryptd: true  # false positives arise from the crypt_shared library
      run_on:
          - ubuntu1804-build
      tasks:
          - name: compile_and_test_with_shared_libs
          - name: compile_and_test_with_shared_libs_extra_alignment
          - name: compile_and_test_with_static_libs
          - name: compile_and_test_with_static_libs_extra_alignment

    - name: ubuntu1804-debug-valgrind-50
      display_name: "Valgrind Ubuntu 18.04 Debug (MongoDB 5.0)"
      expansions:
          build_type: "Debug"
          tar_options: *linux_tar_options
          extra_path: *linux_extra_path
          cmake_flags: *linux_cmake_flags
          test_params: *valgrind_test_params
          mongodb_version: *version_50
          disable_slow_tests: 1
          use_mongocryptd: true
      run_on:
          - ubuntu1804-build
      tasks:
          - name: compile_and_test_with_shared_libs
          - name: compile_and_test_with_shared_libs_extra_alignment
          - name: compile_and_test_with_static_libs
          - name: compile_and_test_with_static_libs_extra_alignment

    - name: ubuntu1804-debug-asan-latest
      display_name: "ASAN Ubuntu 18.04 Debug (MongoDB Latest)"
      expansions:
          build_type: "Debug"
          tar_options: *linux_tar_options
          extra_path: *linux_extra_path
          cmake_flags: *asan_cmake_flags
          test_params: *asan_test_params
          mongodb_version: *version_latest
          example_projects_cc: *asan_cc_path
          example_projects_cxx: *asan_cxx_path
          example_projects_cxxflags: *asan_cxxflags
          example_projects_ldflags: *asan_ldflags
      run_on:
          - ubuntu1804-build
      tasks:
          - name: compile_and_test_with_shared_libs
          - name: compile_and_test_with_shared_libs_extra_alignment
          - name: compile_and_test_with_static_libs
          - name: compile_and_test_with_static_libs_extra_alignment

    - name: ubuntu1804-debug-asan-50
      display_name: "ASAN Ubuntu 18.04 Debug (MongoDB 5.0)"
      expansions:
          build_type: "Debug"
          tar_options: *linux_tar_options
          extra_path: *linux_extra_path
          cmake_flags: *asan_cmake_flags
          test_params: *asan_test_params
          mongodb_version: *version_50
          example_projects_cc: *asan_cc_path
          example_projects_cxx: *asan_cxx_path
          example_projects_cxxflags: *asan_cxxflags
          example_projects_ldflags: *asan_ldflags
      run_on:
          - ubuntu1804-build
      tasks:
          - name: compile_and_test_with_shared_libs
          - name: compile_and_test_with_shared_libs_extra_alignment
          - name: compile_and_test_with_static_libs
          - name: compile_and_test_with_static_libs_extra_alignment

    - name: ubuntu1804-debug-ubsan-latest
      display_name: "UBSAN Ubuntu 18.04 Debug (MongoDB Latest)"
      expansions:
          build_type: "Debug"
          tar_options: *linux_tar_options
          extra_path: *linux_extra_path
          cmake_flags: *ubsan_cmake_flags
          test_params: *ubsan_test_params
          mongodb_version: *version_latest
          example_projects_cc: *ubsan_cc_path
          example_projects_cxx: *ubsan_cxx_path
          example_projects_cxxflags: *ubsan_cxxflags
          example_projects_ldflags: *ubsan_ldflags
      run_on:
          - ubuntu1804-build
      tasks:
          # We currently don't run UBSAN on the shared library due to issues with UBSAN reporting
          # numerous false positive instances of undefined behavior in the mock tests, when the
          # driver invokes mock callback functions that have libmongoc types in the callback
          # signature.
          - name: compile_and_test_with_static_libs

    - name: ubuntu1804-debug-ubsan-50
      display_name: "UBSAN Ubuntu 18.04 Debug (MongoDB 5.0)"
      expansions:
          build_type: "Debug"
          tar_options: *linux_tar_options
          extra_path: *linux_extra_path
          cmake_flags: *ubsan_cmake_flags
          test_params: *ubsan_test_params
          mongodb_version: *version_50
          example_projects_cc: *ubsan_cc_path
          example_projects_cxx: *ubsan_cxx_path
          example_projects_cxxflags: *ubsan_cxxflags
          example_projects_ldflags: *ubsan_ldflags
      run_on:
          - ubuntu1804-build
      tasks:
          # We currently don't run UBSAN on the shared library due to issues with UBSAN reporting
          # numerous false positive instances of undefined behavior in the mock tests, when the
          # driver invokes mock callback functions that have libmongoc types in the callback
          # signature.
          - name: compile_and_test_with_static_libs

    - name: ubuntu1804-debug
      display_name: "Ubuntu 18.04 Debug (MongoDB Latest)"
      expansions:
        build_type: "Debug"
        tar_options: *linux_tar_options
        cmake_flags: *linux_cmake_flags
        mongodb_version: *version_latest
      run_on:
        - ubuntu1804-build
      tasks:
        - name: clang-tidy
        - name: compile_without_tests

    - name: ubuntu2204-debug-gcc
      display_name: "Ubuntu 22.04 Debug (GCC)"
      expansions:
        build_type: "Debug"
        tar_options: *linux_tar_options
        cmake_flags: *linux_cmake_flags
        mongodb_version: *version_latest
        compiler: g++
      run_on:
        - ubuntu2204-small
      tasks:
        - name: compile_without_tests

    - name: ubuntu2204-debug-clang
      display_name: "Ubuntu 22.04 Debug (Clang)"
      expansions:
        build_type: "Debug"
        tar_options: *linux_tar_options
        cmake_flags: *linux_cmake_flags
        mongodb_version: *version_latest
        compiler: clang++
      run_on:
        - ubuntu2204-small
      tasks:
        - name: compile_without_tests

    - name: mongohouse-ubuntu
      display_name: "Mongohouse Test"
      expansions:
          build_type: "Release"
          tar_options: *linux_tar_options
          cmake_flags: *linux_cmake_flags
          mongodb_version: *version_latest
      run_on: ubuntu1804-test
      tasks:
          - name: test_mongohouse

    - name: zseries-rhel83-latest
      display_name: "zSeries RHEL 8.3 (MongoDB Latest)"
      batchtime: 1440 # 1 day
      expansions:
          build_type: "Release"
          tar_options: *linux_tar_options
          cmake_flags: *linux_cmake_flags
          mongodb_version: *version_latest
          cmake: "cmake"
          lib_dir: "lib64"
      run_on:
          - rhel83-zseries-small
      tasks:
          - name: compile_with_shared_libs
          - name: compile_and_test_with_shared_libs
          - name: compile_and_test_with_shared_libs_extra_alignment
          - name: compile_and_test_with_static_libs
          - name: compile_and_test_with_static_libs_extra_alignment

    - name: zseries-rhel83-60
      display_name: "zSeries RHEL 8.3 (MongoDB 6.0)"
      batchtime: 1440 # 1 day
      expansions:
          build_type: "Release"
          tar_options: *linux_tar_options
          cmake_flags: *linux_cmake_flags
          mongodb_version: *version_60
          cmake: "cmake"
          lib_dir: "lib64"
      run_on:
          - rhel83-zseries-small
      tasks:
          - name: compile_with_shared_libs
          - name: compile_and_test_with_shared_libs
          - name: compile_and_test_with_shared_libs_extra_alignment
          - name: compile_and_test_with_static_libs
          - name: compile_and_test_with_static_libs_extra_alignment

    - name: zseries-rhel83-50
      display_name: "zSeries RHEL 8.3 (MongoDB 5.0)"
      batchtime: 1440 # 1 day
      expansions:
          build_type: "Release"
          tar_options: *linux_tar_options
          cmake_flags: *linux_cmake_flags
          mongodb_version: *version_50
          cmake: "cmake"
          lib_dir: "lib64"
      run_on:
          - rhel83-zseries-small
      tasks:
          - name: compile_with_shared_libs
          - name: compile_and_test_with_shared_libs
          - name: compile_and_test_with_shared_libs_extra_alignment
          - name: compile_and_test_with_static_libs
          - name: compile_and_test_with_static_libs_extra_alignment

    - name: power8-rhel81-latest
      display_name: "ppc64le RHEL 8.1 (MongoDB Latest)"
      batchtime: 1440 # 1 day
      expansions:
          build_type: "Release"
          tar_options: *linux_tar_options
          cmake_flags: *power8_cmake_flags
          mongodb_version: *version_latest
          cmake: "cmake"
          lib_dir: "lib64"
      run_on:
          - rhel81-power8-large
      tasks:
          - name: compile_with_shared_libs
          - name: compile_and_test_with_shared_libs
          - name: compile_and_test_with_shared_libs_extra_alignment
          - name: compile_and_test_with_static_libs
          - name: compile_and_test_with_static_libs_extra_alignment

    - name: power8-rhel81-50
      display_name: "ppc64le RHEL 8.1 (MongoDB 5.0)"
      batchtime: 1440 # 1 day
      expansions:
          build_type: "Release"
          tar_options: *linux_tar_options
          cmake_flags: *power8_cmake_flags
          mongodb_version: *version_50
          cmake: "cmake"
          lib_dir: "lib64"
      run_on:
          - rhel81-power8-large
      tasks:
          - name: compile_with_shared_libs
          - name: compile_and_test_with_shared_libs
          - name: compile_and_test_with_shared_libs_extra_alignment
          - name: compile_and_test_with_static_libs
          - name: compile_and_test_with_static_libs_extra_alignment

    - name: arm-ubuntu1804-latest
      display_name: "arm64 Ubuntu 18.04 (MongoDB Latest)"
      batchtime: 1440 # 1 day
      expansions:
          build_type: "Release"
          tar_options: *linux_tar_options
          cmake_flags: *linux_cmake_flags
          mongodb_version: *version_latest
      run_on:
          - ubuntu1804-arm64-build
      tasks:
          - name: compile_and_test_with_shared_libs
          - name: compile_and_test_with_shared_libs_extra_alignment
          - name: compile_and_test_with_static_libs
          - name: compile_and_test_with_static_libs_extra_alignment

    - name: arm-ubuntu1804-50
      display_name: "arm64 Ubuntu 18.04 (MongoDB 5.0)"
      batchtime: 1440 # 1 day
      expansions:
          build_type: "Release"
          tar_options: *linux_tar_options
          cmake_flags: *linux_cmake_flags
          mongodb_version: *version_50
      run_on:
          - ubuntu1804-arm64-build
      tasks:
          - name: compile_and_test_with_shared_libs
          - name: compile_and_test_with_shared_libs_extra_alignment
          - name: compile_and_test_with_static_libs
          - name: compile_and_test_with_static_libs_extra_alignment

    # Test that we actually support building against the minimum required C version claimed.
    - name: ubuntu1804-min-libmongoc
      display_name: "Ubuntu 18.04 with minimum libmongoc (MongoDB Latest)"
      batchtime: 1440 # 1 day
      expansions:
          build_type: "Debug"
          tar_options: *linux_tar_options
          cmake_flags: *linux_cmake_flags
          mongodb_version: *version_latest
          mongoc_version: *mongoc_version_minimum
      run_on:
          - ubuntu1804-build
      tasks:
          - name: compile_and_test_with_shared_libs
          - name: compile_and_test_with_shared_libs_extra_alignment
          - name: compile_and_test_with_static_libs
          - name: compile_and_test_with_static_libs_extra_alignment

    #######################################
    #         Mac and Windows             #
    #######################################
    - name: macos-1014-latest # CXX-2661: remove in favor of macos-1100.
      display_name: "MacOS 10.14 Release (Boost) (MongoDB Latest)"
      expansions:
          build_type: "Release"
          extra_path: *macos_extra_path
          cmake_flags: *macos_cmake_flags
          poly_flags: *poly_boost_flags
          mongodb_version: *version_latest
      run_on:
          - macos-1014
      tasks:
          - name: compile_and_test_with_shared_libs
          - name: compile_and_test_with_shared_libs_extra_alignment
          - name: compile_and_test_with_static_libs
          - name: compile_and_test_with_static_libs_extra_alignment

    - name: macos-1014-50 # CXX-2661: remove in favor of macos-1100.
      display_name: "MacOS 10.14 Release (Boost) (MongoDB 5.0)"
      expansions:
          build_type: "Release"
          extra_path: *macos_extra_path
          cmake_flags: *macos_cmake_flags
          poly_flags: *poly_boost_flags
          mongodb_version: *version_50
      run_on:
          - macos-1014
      tasks:
          - name: compile_and_test_with_shared_libs
          - name: compile_and_test_with_shared_libs_extra_alignment
          - name: compile_and_test_with_static_libs
          - name: compile_and_test_with_static_libs_extra_alignment

    - name: macos-1014-versioned-api # CXX-2661: remove in favor of macos-1100.
      display_name: "MacOS 10.14 Release Versioned API"
      expansions:
          build_type: "Release"
          extra_path: *macos_extra_path
          cmake_flags: *macos_cmake_flags
          poly_flags: *poly_boost_flags
          mongodb_version: *version_latest
      run_on:
          - macos-1014
      tasks:
          - name: test_versioned_api
          - name: test_versioned_api_accept_version_two

    - name: macos-1100-latest
      display_name: "MacOS 11.0 Release (Boost) (MongoDB Latest)"
      expansions:
          build_type: "Release"
          extra_path: *macos_extra_path
          cmake_flags: *macos_cmake_flags
          poly_flags: *poly_boost_flags
          mongodb_version: *version_latest
      run_on:
          - macos-1100
      tasks:
          - name: compile_and_test_with_shared_libs
          - name: compile_and_test_with_shared_libs_extra_alignment
          - name: compile_and_test_with_static_libs
          - name: compile_and_test_with_static_libs_extra_alignment

    - name: macos-1100-50
      display_name: "MacOS 11.0 Release (Boost) (MongoDB 5.0)"
      expansions:
          build_type: "Release"
          extra_path: *macos_extra_path
          cmake_flags: *macos_cmake_flags
          poly_flags: *poly_boost_flags
          mongodb_version: *version_50
      run_on:
          - macos-1100
      tasks:
          - name: compile_and_test_with_shared_libs
          - name: compile_and_test_with_shared_libs_extra_alignment
          - name: compile_and_test_with_static_libs
          - name: compile_and_test_with_static_libs_extra_alignment

    - name: macos-1100-versioned-api
      display_name: "MacOS 11.0 Release Versioned API"
      expansions:
          build_type: "Release"
          extra_path: *macos_extra_path
          cmake_flags: *macos_cmake_flags
          poly_flags: *poly_boost_flags
          mongodb_version: *version_latest
      run_on:
          - macos-1100
      tasks:
          - name: test_versioned_api
          - name: test_versioned_api_accept_version_two

    - name: windows-2k8-release
      display_name: "Windows (VS 2015) Release (MongoDB 4.2)"
      expansions:
          build_type: "Release"
          tar_options: *linux_tar_options
          extra_path: *msvc2015_extra_path
          cmake_flags: *msvc2015_cmake_flags
          mongodb_version: *version_42
          generator: *msvc2015_generator
      run_on:
          - windows-64-vs2015-compile
      tasks:
          - name: compile_and_test_with_shared_libs
          - name: compile_and_test_with_shared_libs_extra_alignment
          - name: compile_and_test_with_static_libs
          - name: compile_and_test_with_static_libs_extra_alignment
          - name: uninstall_check_windows

    - name: windows-2k8-debug
      display_name: "Windows (VS 2015) Debug Static (MongoDB 4.2)"
      expansions:
          build_type: "Debug"
          tar_options: *linux_tar_options
          extra_path: *msvc2015_extra_path
          cmake_flags: *msvc2015_cmake_flags
          mongodb_version: *version_42
          generator: *msvc2015_generator
      run_on:
          - windows-64-vs2015-compile
      tasks:
          # The debug shared lib is tested in the "integration tests" matrix
          - name: compile_and_test_with_static_libs
          - name: compile_and_test_with_static_libs_extra_alignment

    - name: windows-msvc2015-debug
      display_name: "Windows (VS 2015) Debug (MongoDB 4.2)"
      expansions:
          build_type: "Debug"
          tar_options: *linux_tar_options
          extra_path: *msvc2015_extra_path
          cmake_flags: *msvc2015_cmake_flags
          generator: *msvc2015_generator
          mongodb_version: *version_42
      run_on:
         - windows-64-vs2015-compile
      tasks:
         - name: compile_with_shared_libs
         - name: compile_and_test_auth_with_shared_libs

    - name: packaging
      display_name: Linux Distro Packaging
      run_on: ubuntu1804-test
      tasks:
         - name: debian-package-build
         - name: debian-package-build-mnmlstc
         - name: rpm-package-build
           distros:
           - rhel90-arm64-small
