// Copyright 2014 MongoDB Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// compiler.hpp
#pragma push_macro("BSONCXX_INLINE")
#undef BSONCXX_INLINE
#pragma push_macro("BSONCXX_CALL")
#undef BSONCXX_CALL

// config.hpp (generated by CMake)
#pragma push_macro("BSONCXX_INLINE_NAMESPACE_BEGIN")
#undef BSONCXX_INLINE_NAMESPACE_BEGIN
#pragma push_macro("BSONCXX_INLINE_NAMESPACE_END")
#undef BSONCXX_INLINE_NAMESPACE_END
#pragma push_macro("BSONCXX_POLY_USE_MNMLSTC")
#undef BSONCXX_POLY_USE_MNMLSTC
#pragma push_macro("BSONCXX_POLY_USE_STD_EXPERIMENTAL")
#undef BSONCXX_POLY_USE_STD_EXPERIMENTAL
#pragma push_macro("BSONCXX_POLY_USE_SYSTEM_MNMLSTC")
#undef BSONCXX_POLY_USE_SYSTEM_MNMLSTC
#pragma push_macro("BSONCXX_POLY_USE_BOOST")
#undef BSONCXX_POLY_USE_BOOST

// version.hpp (generated by CMake)
#pragma push_macro("BSONCXX_VERSION_EXTRA")
#undef BSONCXX_VERSION_EXTRA
#pragma push_macro("BSONCXX_VERSION_MAJOR")
#undef BSONCXX_VERSION_MAJOR
#pragma push_macro("BSONCXX_VERSION_MINOR")
#undef BSONCXX_VERSION_MINOR
#pragma push_macro("BSONCXX_VERSION_PATCH")
#undef BSONCXX_VERSION_PATCH

// export.hpp (generated by CMake)
#pragma push_macro("BSONCXX_API_H")
#undef BSONCXX_API_H
#pragma push_macro("BSONCXX_API")
#undef BSONCXX_API
#pragma push_macro("BSONCXX_PRIVATE")
#undef BSONCXX_PRIVATE
#pragma push_macro("BSONCXX_DEPRECATED")
#undef BSONCXX_DEPRECATED
#pragma push_macro("BSONCXX_DEPRECATED_EXPORT")
#undef BSONCXX_DEPRECATED_EXPORT
#pragma push_macro("BSONCXX_DEPRECATED_NO_EXPORT")
#undef BSONCXX_DEPRECATED_NO_EXPORT
#pragma push_macro("DEFINE_NO_DEPRECATED")
#undef DEFINE_NO_DEPRECATED
#pragma push_macro("BSONCXX_NO_DEPRECATED")
#undef BSONCXX_NO_DEPRECATED

#include <bsoncxx/config/compiler.hpp>
#include <bsoncxx/config/config.hpp>
#include <bsoncxx/config/export.hpp>
#include <bsoncxx/config/version.hpp>

#pragma push_macro("BSONCXX_UNREACHABLE")
#undef BSONCXX_UNREACHABLE
#define BSONCXX_UNREACHABLE std::abort()

// CXX-2769: out-of-place, but remains for backward compatibility.
#pragma push_macro("BSONCXX_ENUM")
#undef BSONCXX_ENUM

// Doxygen does not account for generated header files.
// Document globally applicable macros and namespaces here.

///
/// @namespace bsoncxx
/// The top-level namespace for bsoncxx library entities.
///

///
/// @namespace bsoncxx::v_noabi
/// Entities declared in this namespace do not have a stable ABI.
///

///
/// @namespace bsoncxx::v_noabi::stdx
/// Declares polyfills for C++17 forward compatibility.
///

#pragma push_macro("mongo_cxx14_constexpr")
#if __cplusplus >= 201402L
#define mongo_cxx14_constexpr constexpr
#else
#define mongo_cxx14_constexpr inline
#endif

#pragma push_macro("bsoncxx_returns")
/**
 * @brief Add a trailing noexcept, decltype-return, and return-body to a function definition.
 */
#define bsoncxx_returns(...)                                 \
    noexcept(noexcept(__VA_ARGS__))->decltype(__VA_ARGS__) { \
        return __VA_ARGS__;                                  \
    }                                                        \
    bsoncxx_force_semicolon

// clang-format off

#pragma push_macro("bsoncxx_if_msvc")
#define bsoncxx_if_msvc(...)
#pragma push_macro("bsoncxx_if_gcc")
#define bsoncxx_if_gcc(...)
#pragma push_macro("bsoncxx_if_clang")
#define bsoncxx_if_clang(...)
#pragma push_macro("bsoncxx_if_gnu_like")
#define bsoncxx_if_gnu_like(...) \
    bsoncxx_if_gcc(__VA_ARGS__) \
    bsoncxx_if_clang(__VA_ARGS__)

#ifdef __GNUC__
    #ifdef __clang__
        #undef bsoncxx_if_clang
        #define bsoncxx_if_clang(...) __VA_ARGS__
    #else
        #undef bsoncxx_if_gcc
        #define bsoncxx_if_gcc(...) __VA_ARGS__
    #endif
#elif defined(_MSC_VER)
    #undef bsoncxx_if_msvc
    #undef bsoncxx_if_msvc(...) __VA_ARGS__
#endif

#pragma push_macro("bsoncxx_stringify")
#pragma push_macro("bsoncxx_stringify_impl")
#define bsoncxx_stringify(...) bsoncxx_stringify_impl(__VA_ARGS__)
#define bsoncxx_stringify_impl(...) #__VA_ARGS__

#pragma push_macro("bsoncxx_pragma")
#define bsoncxx_pragma(...) _Pragma(bsoncxx_stringify(__VA_ARGS__))

#pragma push_macro("bsoncxx_force_semicolon")
/**
 * @brief Use in a declaration position to force the appearence of a semicolon as the next token
 */
#define bsoncxx_force_semicolon static_assert(true, "")

#pragma push_macro("bsoncxx_concat")
#pragma push_macro("bsoncxx_concat_impl")
#define bsoncxx_concat(A, ...) bsoncxx_concat_impl(A, __VA_ARGS__)
#define bsoncxx_concat_impl(A, ...) A##__VA_ARGS__

#pragma push_macro("bsoncxx_disable_warning")
/**
 * @brief Disable a warning for a particular compiler.
 *
 * The argument should be of the form:
 *
 * - Clang(<flag-string>)
 * - GCC(<flag-string>)
 * - GNU(<flag-string>)
 * - MSVC(<id-integer>)
 */
#define bsoncxx_disable_warning(Spec) bsoncxx_concat(BSONCXX_DISABLE_WARNING_IMPL_, Spec)

#pragma push_macro("bsoncxx_push_warnings")
/**
 * @brief Push the current compiler diagnostics settings state
 */
#define bsoncxx_push_warnings() \
    bsoncxx_if_gnu_like(bsoncxx_pragma(GCC diagnostic push);) \
    bsoncxx_if_msvc(bsoncxx_pragma(warning(push));) \
    bsoncxx_force_semicolon

#pragma push_macro("bsoncxx_pop_warnings")
/**
 * @brief Restore prior compiler diagnostics settings from before the most
 * recent bsoncxx_push_warnings()
 */
#define bsoncxx_pop_warnings() \
    bsoncxx_if_gnu_like(bsoncxx_pragma(GCC diagnostic pop);) \
    bsoncxx_if_msvc(bsoncxx_pragma(warning(pop));) \
    bsoncxx_force_semicolon

#pragma push_macro("BSONCXX_DISABLE_WARNING_IMPL_GCC")
#define BSONCXX_DISABLE_WARNING_IMPL_GCC(...) \
    bsoncxx_if_gcc(bsoncxx_pragma(GCC diagnostic ignored __VA_ARGS__);) \
    bsoncxx_force_semicolon

#pragma push_macro("BSONCXX_DISABLE_WARNING_IMPL_Clang")
#define BSONCXX_DISABLE_WARNING_IMPL_Clang(...) \
    bsoncxx_if_clang(bsoncxx_pragma(GCC diagnostic ignored __VA_ARGS__);) \
    bsoncxx_force_semicolon

#pragma push_macro("BSONCXX_DISABLE_WARNING_IMPL_GNU")
#define BSONCXX_DISABLE_WARNING_IMPL_GNU(...) \
    BSONCXX_DISABLE_WARNING_IMPL_GCC(__VA_ARGS__); \
    BSONCXX_DISABLE_WARNING_IMPL_Clang(__VA_ARGS__)

#pragma push_macro("BSONCXX_DISABLE_WARNING_IMPL_MSVC")
#define BSONCXX_DISABLE_WARNING_IMPL_MSVC(...) \
    bsoncxx_if_msvc(warning(disable : __VA_ARGS__))

// clang-format on
