# Copyright 2016 MongoDB Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

if(NOT BUILD_TESTING)
    set_property(DIRECTORY PROPERTY EXCLUDE_FROM_ALL TRUE)
endif()

if(BSONCXX_BUILD_SHARED)
    bsoncxx_add_library(bsoncxx_testing "bsoncxx-testing" SHARED)
else()
    bsoncxx_add_library(bsoncxx_testing "bsoncxx-testing" STATIC)
endif()

target_compile_definitions(bsoncxx_testing PUBLIC BSONCXX_TESTING)

add_executable(test_bson
    array.cpp
    bson_b_date.cpp
    bson_builder.cpp
    bson_get_values.cpp
    bson_serialization.cpp
    bson_types.cpp
    bson_util_itoa.cpp
    bson_validate.cpp
    bson_value.cpp
    json.cpp
    oid.cpp
    view_or_value.cpp
)

# Common target properties for test executables.
add_library(bsoncxx_test_properties INTERFACE)
target_link_libraries(bsoncxx_test_properties INTERFACE bsoncxx_testing ${libbson_target})
target_include_directories(bsoncxx_test_properties INTERFACE

    # Allow `#include <bson/bson.h>`
    ${libbson_include_directories}

    # Allow `#include <bsoncxx/test/...>` and `#include <third_party/...>`.
    ${CMAKE_CURRENT_SOURCE_DIR}/../..
)
target_compile_definitions(bsoncxx_test_properties INTERFACE ${libbson_definitions})

# Avoid redundant recompilation of catch/main.cpp.
add_library(bsoncxx_catch_main OBJECT ${THIRD_PARTY_SOURCE_DIR}/catch/main.cpp)
target_link_libraries(bsoncxx_catch_main PRIVATE bsoncxx_test_properties)
add_library(bsoncxx_test_properties_with_main INTERFACE)
target_sources(bsoncxx_test_properties_with_main INTERFACE $<TARGET_OBJECTS:bsoncxx_catch_main>)
target_link_libraries(bsoncxx_test_properties_with_main INTERFACE bsoncxx_test_properties)

target_link_libraries(test_bson PRIVATE bsoncxx_test_properties_with_main)

add_test(NAME bson COMMAND test_bson)

# Generate test to ensure macro guards behave properly.
if(ENABLE_MACRO_GUARD_TESTS)
    set(BSONCXX_GUARDED_MACROS "")

    # Public macros.
    list(APPEND BSONCXX_GUARDED_MACROS

        # compiler.hpp
        BSONCXX_INLINE
        BSONCXX_CALL

        # config.hpp (generated by CMake)
        BSONCXX_INLINE_NAMESPACE_BEGIN
        BSONCXX_INLINE_NAMESPACE_END
        BSONCXX_POLY_USE_MNMLSTC
        BSONCXX_POLY_USE_STD_EXPERIMENTAL
        BSONCXX_POLY_USE_SYSTEM_MNMLSTC
        BSONCXX_POLY_USE_BOOST

        # version.hpp (generated by CMake)
        BSONCXX_VERSION_EXTRA
        BSONCXX_VERSION_MAJOR
        BSONCXX_VERSION_MINOR
        BSONCXX_VERSION_PATCH

        # export.hpp (generated by CMake)
        BSONCXX_API_H
        BSONCXX_API
        BSONCXX_PRIVATE
        BSONCXX_DEPRECATED
        BSONCXX_DEPRECATED_EXPORT
        BSONCXX_DEPRECATED_NO_EXPORT
        DEFINE_NO_DEPRECATED
        BSONCXX_NO_DEPRECATED

        # prelude.hpp
        BSONCXX_UNREACHABLE
    )

    # Private macros (currently, none).
    list(APPEND BSONCXX_GUARDED_MACROS)

    # Public bsoncxx headers.
    file(GLOB_RECURSE BSONCXX_GUARDED_PUBLIC_HEADERS
        LIST_DIRECTORIES false
        RELATIVE ${PROJECT_SOURCE_DIR}
        "${PROJECT_SOURCE_DIR}/include/**/*.hpp"
    )

    # Private bsoncxx headers.
    file(GLOB_RECURSE BSONCXX_GUARDED_PRIVATE_HEADERS
        LIST_DIRECTORIES false
        RELATIVE ${PROJECT_SOURCE_DIR}
        "${PROJECT_SOURCE_DIR}/lib/**/*.hh"
    )

    # Test bsoncxx headers.
    file(GLOB_RECURSE BSONCXX_GUARDED_TEST_HEADERS
        LIST_DIRECTORIES false
        RELATIVE ${PROJECT_SOURCE_DIR}
        "${PROJECT_SOURCE_DIR}/test/**/*.hh"
    )

    # Exclude config headers.
    list(FILTER BSONCXX_GUARDED_PUBLIC_HEADERS EXCLUDE REGEX ".*/bsoncxx/config/.*")
    list(FILTER BSONCXX_GUARDED_PRIVATE_HEADERS EXCLUDE REGEX ".*/bsoncxx/config/.*")

    # Exclude X macro headers.
    list(FILTER BSONCXX_GUARDED_PUBLIC_HEADERS EXCLUDE REGEX ".*/bsoncxx/enums/.*")

    # Exclude symbol headers.
    list(FILTER BSONCXX_GUARDED_PRIVATE_HEADERS EXCLUDE REGEX ".*/.*_symbols.hh")

    set(BSONCXX_GUARDED_HEADERS
        ${BSONCXX_GUARDED_PUBLIC_HEADERS}
        ${BSONCXX_GUARDED_PRIVATE_HEADERS}
        ${BSONCXX_GUARDED_TEST_HEADERS}
    )

    set(BSONCXX_MACRO_GUARD_TEST_PRELUDE "")

    # Check and set initial state.
    foreach(macro ${BSONCXX_GUARDED_MACROS})
        string(APPEND BSONCXX_MACRO_GUARD_TEST_PRELUDE
            "#if defined(${macro})\n"
            "#error \"${macro} is already defined\"\n"
            "#endif\n"
            "#define ${macro} macro guard test\n"
            "\n"
        )
    endforeach()

    # Implement as recursive algorithm for C++11 compatibility.
    string(APPEND BSONCXX_MACRO_GUARD_TEST_PRELUDE
        "static constexpr bool compare_equal(const char* lhs, const char* rhs) {\n"
        "    return (*lhs == *rhs) && (*lhs == '\\0' || compare_equal(lhs + 1, rhs + 1));\n"
        "}\n"
        "\n"
        "static_assert(compare_equal(\"abc\", \"abc\"), \"compare_equal() sanity check failed\");\n"
        "static_assert(!compare_equal(\"abc\", \"def\"), \"compare_equal() sanity check failed\");\n"
        "\n"
        "#define _TO_STR(x) #x\n"
        "#define TO_STR(x) _TO_STR(x)\n"
        "\n"
    )

    add_custom_target(test_bsoncxx_macro_guards)

    # Test each header individually.
    foreach(header ${BSONCXX_GUARDED_HEADERS})
        set(BSONCXX_MACRO_GUARD_TEST "${BSONCXX_MACRO_GUARD_TEST_PRELUDE}")

        # Strip the subdir.
        string(REGEX REPLACE "^(include|lib|test)/(.*)$" "\\1" subdir "${header}")
        string(REGEX REPLACE "^(include|lib|test)/(.*)$" "\\2" header ${header})

        # Apply include prefix to test headers.
        if("${subdir}" STREQUAL "test")
            set(relheader "bsoncxx/test/${header}")
        else()
            set(relheader "${header}")
        endif()

        # The include directive.
        string(APPEND BSONCXX_MACRO_GUARD_TEST "#include <${relheader}>\n\n")

        # Test all guarded macros have been properly restored.
        foreach(macro ${BSONCXX_GUARDED_MACROS})
            string(APPEND BSONCXX_MACRO_GUARD_TEST
                "static_assert(\n"
                "    compare_equal(TO_STR(${macro}),\"macro guard test\"),\n"
                "    \"${macro} was not correctly restored by <${relheader}>\"\n"
                ");\n"
                "\n"
            )
        endforeach()

        # bsoncxx/v_noabi/bsoncxx/config/config.hpp -> bsoncxx-v_noabi-bsoncxx-config-config
        string(REPLACE "/" "-" test_name "${header}")
        string(REGEX REPLACE "^(.*)\\.(hh|hpp)$" "\\1" test_name "${test_name}")
        configure_file(test_macro_guards.cpp.in macro_guards/${subdir}/${test_name}.cpp)

        # Prefix library name to reduce potential for target conflicts.
        add_library(test-macro_guards-${subdir}-${test_name} STATIC EXCLUDE_FROM_ALL ${CMAKE_CURRENT_BINARY_DIR}/macro_guards/${subdir}/${test_name}.cpp)
        target_link_libraries(test-macro_guards-${subdir}-${test_name} PRIVATE bsoncxx_test_properties)

        add_dependencies(test_bsoncxx_macro_guards test-macro_guards-${subdir}-${test_name})
    endforeach()
endif()

set_dist_list(src_bsoncxx_test_DIST
    CMakeLists.txt
    array.cpp
    bson_b_date.cpp
    bson_builder.cpp
    bson_get_values.cpp
    bson_serialization.cpp
    bson_types.cpp
    bson_util_itoa.cpp
    bson_validate.cpp
    bson_value.cpp
    catch.hh
    json.cpp
    oid.cpp
    test_macro_guards.cpp.in
    to_string.hh
    view_or_value.cpp
)
